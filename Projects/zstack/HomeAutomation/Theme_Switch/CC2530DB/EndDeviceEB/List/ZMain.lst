###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               06/Jan/2020  18:50:58
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f C:\Users\Souvik\AppData\Local\Temp\EWB1E5.tmp ("D:\VB_Shared\Zigbee
#        Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\ZMain.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -D HAL_UART=TRUE
#        -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D
#        HAL_UART_DMA_TX_MAX=64 -D INT_HEAP_LEN=3172 -lC "D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\" -I
#        "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\keus\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List\ZMain.lst
#    Object file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj\ZMain.r51
#
###############################################################################

D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2019-12-05 16:25:30 -0700 (Thrusday, 05 Dec 2019) $
      4          
      5            Description:    Storing and executing KEUS Scene, Switch press action, Controlling GPIOs through UART.
      6                            Data transmission format: Startbyte-datalength-data-endbyte
      7                            Switch press should toggle corresponding LED
      8                            UART Commands to set single/group led state, save scene, execute scene, delete scene
      9                            & single blink, wait and blink, continuous blink.
     10                            LED Control:
     11                            00 - off
     12                            01 - on
     13                            02 - if previously off turnon<wait>turnoff
     14                                 if previously on turnoff<wait>turnon<wait>turnoff
     15                            03 - Blink continuously
     16                            All scene data is being saved to nvic memory and should retain after power cycle
     17            Notes:          This version targets the Chipcon CC2530
     18          
     19          
     20          
     21          **************************************************************************************************/
     22          
     23          /*********************************************************************
     24           * INCLUDES
     25           */
     26          
     27          #ifndef NONWK
     28          #include "AF.h"
     29          #endif
     30          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     31          #include "hal_flash.h"
     32          #include "hal_lcd.h"
     33          #include "hal_led.h"
     34          #include "hal_uart.h"
     35          #include "hal_drivers.h"
     36          #include "OnBoard.h"
     37          #include "OSAL.h"
     38          #include "OSAL_Nv.h"
     39          #include "ZComDef.h"
     40          #include "ZMAC.h"
     41          #include "keus_gpio_util.h"
     42          #include "keus_timer_util.h"
     43          
     44          /*********************************************************************
     45           * CUSTOM CODE
     46           */
     47          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     48          uint32 keusAppEvents;
   \                     keusAppEvents:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     49          
     50          //Event bit masks
     51          #define KEUS_BUTTON1 0x1
     52          #define KEUS_BUTTON2 0x2
     53          #define KEUS_BUTTON3 0x4
     54          #define KEUS_BUTTON4 0x8
     55          #define KEUS_UART 0x10
     56          
     57          
     58          #define KEUS_UART_BUFFER 32
     59          extern uint8 g0_u8RecData[KEUS_UART_BUFFER];
     60          extern void keusButtonInit(void);
     61          
     62          #define SCN_ARR_NVIC_LOCATION 0x10
     63          
     64          
     65          extern void parseUart(void);
     66          extern void initUart(void);
     67          
     68          //void KEUS_delayms(uint16 ms);
     69          void KEUS_init(void);
     70          void KEUS_loop(void); //the actual polling
     71          
     72          //does nvic operations and returns status of nvic operations
     73          // bool KeusThemeSwitchMiniMemoryInit(void);
     74          // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void);
     75          // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void);
     76          
     77          //status of nvic operations
     78          // uint8 initStatus = 0;
     79          // uint8 writeStatus = 0;
     80          // uint8 readStatus = 0;
     81          
     82          
     83          // void KEUS_delayms(uint16 ms)
     84          // {
     85          //   for (uint16 i = 0; i < ms; i++)
     86          //   {
     87          //     Onboard_wait(1000);
     88          //   }
     89          // }
     90          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     91          void KEUS_init()
   \                     KEUS_init:
     92          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     93            initUart();
   \   000005                ; Setup parameters for call to function initUart
   \   000005   12....       LCALL     `??initUart::?relay`; Banked call to: initUart
     94            keusButtonInit();
   \   000008                ; Setup parameters for call to function keusButtonInit
   \   000008   12....       LCALL     `??keusButtonInit::?relay`; Banked call to: keusButtonInit
     95          
     96            KeusTimerUtilInit();
   \   00000B                ; Setup parameters for call to function KeusTimerUtilInit
   \   00000B   12....       LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
     97            KeusTimerUtilStartTimer();
   \   00000E                ; Setup parameters for call to function KeusTimerUtilStartTimer
   \   00000E   12....       LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
     98            //initStatus = KeusThemeSwitchMiniMemoryInit();
     99            //osal_nv_item_init(SCN_ARR_NVIC_LOCATION, sizeof(arr_scene), (void *)arr_scene);
    100            //readStatus = KeusThemeSwitchMiniReadConfigDataIntoMemory();
    101            //restoring scenes back to memory at startup
    102            //osal_nv_read(SCN_ARR_NVIC_LOCATION, 0, sizeof(arr_scene), (void *)arr_scene);
    103            HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
   \   000011                ; Setup parameters for call to function osal_strlen
   \   000011   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   000013   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   000015   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000018   8A..         MOV       ?V0,R2
   \   00001A                ; Setup parameters for call to function HalUARTWrite
   \   00001A   AC..         MOV       R4,?V0
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   000020   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   000022   7900         MOV       R1,#0x0
   \   000024   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    104          }
   \   000027   7F02         MOV       R7,#0x2
   \   000029   02....       LJMP      ?BANKED_LEAVE_XDATA
    105          
    106          // bool KeusThemeSwitchMiniMemoryInit(void)
    107          // {
    108          
    109          //   uint8 res = osal_nv_item_init(0x10, sizeof(arr_scene), (void *)arr_scene);
    110          
    111          //   if (res == SUCCESS || res == NV_ITEM_UNINIT)
    112          //   {
    113          //     return true;
    114          //   }
    115          //   else
    116          //   {
    117          //     return false;
    118          //   }
    119          // }
    120          
    121          // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
    122          // {
    123          //   uint8 res = osal_nv_write(0x10, 0, sizeof(arr_scene), (void *)arr_scene);
    124          
    125          //   if (res == SUCCESS)
    126          //   {
    127          //     return true;
    128          //   }
    129          //   else
    130          //   {
    131          //     return false;
    132          //   }
    133          // }
    134          
    135          // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
    136          // {
    137          //   uint8 res = osal_nv_read(0x10, 0, sizeof(arr_scene), (void *)arr_scene);
    138          
    139          //   if (res == SUCCESS)
    140          //   {
    141          //     return true;
    142          //   }
    143          //   else
    144          //   {
    145          //     return false;
    146          //   }
    147          // }
    148          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    149          void KEUS_loop()
   \                     KEUS_loop:
    150          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    151            while (1)
    152            {
    153              HalUARTPoll();
   \                     ??KEUS_loop_0:
   \   000005                ; Setup parameters for call to function HalUARTPoll
   \   000005   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
    154              //KEUS_delayms(1000);
    155          
    156              if (keusAppEvents & KEUS_UART)
   \   000008   90....       MOV       DPTR,#keusAppEvents
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?L_MOV_X
   \   000010   E5..         MOV       A,?V0
   \   000012   5410         ANL       A,#0x10
   \   000014   60EF         JZ        ??KEUS_loop_0
    157              {
    158                parseUart();
   \   000016                ; Setup parameters for call to function parseUart
   \   000016   12....       LCALL     `??parseUart::?relay`; Banked call to: parseUart
    159                keusAppEvents ^= KEUS_UART;
   \   000019   90....       MOV       DPTR,#__Constant_10
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?L_MOV_X
   \   000021   90....       MOV       DPTR,#keusAppEvents
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?L_XOR_TO_X
   \   000029   80DA         SJMP      ??KEUS_loop_0
    160              }
    161          
    162            }
    163          }
    164          
    165          
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          
    170          static void zmain_ext_addr(void);
    171          #if defined ZCL_KEY_ESTABLISH
    172          static void zmain_cert_init(void);
    173          #endif
    174          static void zmain_dev_info(void);
    175          static void zmain_vdd_check(void);
    176          
    177          #ifdef LCD_SUPPORTED
    178          static void zmain_lcd_init(void);
    179          #endif
    180          
    181          /*********************************************************************
    182           * @fn      main
    183           * @brief   First function called after startup.
    184           * @return  don't care
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          int main(void)
   \                     main:
    187          {
   \   000000                ; Auto size: 0
    188            // Turn off interrupts
    189            osal_int_disable(INTS_ALL);
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV       R1,#-0x1
   \   000002   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    190          
    191            // Initialization for board related stuff such as LEDs
    192            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL       0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV       A,0x9d
   \   00000A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000C   50FA         JNC       ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV       R0,#-0x8
   \   000011   7901         MOV       R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV       A,R0
   \   000015   24FF         ADD       A,#-0x1
   \   000017   18           DEC       R0
   \   000018   E9           MOV       A,R1
   \   000019   34FF         ADDC      A,#-0x1
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   70F3         JNZ       ??main_1
   \   000020   75C600       MOV       0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV       A,0x9e
   \   000025   70FC         JNZ       ??main_2
   \   000027   43BE04       ORL       0xbe,#0x4
   \   00002A   906270       MOV       DPTR,#0x6270
   \   00002D   7408         MOV       A,#0x8
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   C290         CLR       0x90.0
   \   000032   43FE01       ORL       0xfe,#0x1
   \   000035   C291         CLR       0x90.1
   \   000037   43FE02       ORL       0xfe,#0x2
   \   00003A   C294         CLR       0x90.4
   \   00003C   43FE10       ORL       0xfe,#0x10
   \   00003F   C281         CLR       0x80.1
   \   000041   43FD02       ORL       0xfd,#0x2
   \   000044   438F01       ORL       0x8f,#0x1
    193          
    194            // Make sure supply voltage is high enough to run
    195            zmain_vdd_check();
   \   000047   7E10         MOV       R6,#0x10
   \                     ??main_3:
   \   000049                ; Setup parameters for call to function HalAdcCheckVdd
   \   000049   794E         MOV       R1,#0x4e
   \   00004B   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00004E   E9           MOV       A,R1
   \   00004F   60F8         JZ        ??main_3
   \   000051   1E           DEC       R6
   \   000052   EE           MOV       A,R6
   \   000053   70F4         JNZ       ??main_3
    196          
    197            // Initialize board I/O
    198            InitBoard(OB_COLD);
   \   000055                ; Setup parameters for call to function InitBoard
   \   000055   7900         MOV       R1,#0x0
   \   000057   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    199          
    200            // Initialze HAL drivers
    201            HalDriverInit();
   \   00005A                ; Setup parameters for call to function HalDriverInit
   \   00005A   12....       LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
    202          
    203            // Initialize NV System
    204            osal_nv_init(NULL);
   \   00005D                ; Setup parameters for call to function osal_nv_init
   \   00005D   7A00         MOV       R2,#0x0
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
    205          
    206            // Initialize the MAC
    207            ZMacInit();
   \   000064                ; Setup parameters for call to function ZMacInit
   \   000064   12....       LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
    208          
    209            // Determine the extended address
    210            zmain_ext_addr();
   \   000067                ; Setup parameters for call to function zmain_ext_addr
   \   000067   12....       LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    211          
    212          #if defined ZCL_KEY_ESTABLISH
    213            // Initialize the Certicom certificate information.
    214            zmain_cert_init();
    215          #endif
    216          
    217            // Initialize basic NV items
    218            zgInit();
   \   00006A                ; Setup parameters for call to function zgInit
   \   00006A   12....       LCALL     `??zgInit::?relay`; Banked call to: zgInit
    219          
    220          #ifndef NONWK
    221            // Since the AF isn't a task, call it's initialization routine
    222            afInit();
    223          #endif
    224          
    225            // Initialize the operating system
    226            osal_init_system();
   \   00006D                ; Setup parameters for call to function osal_init_system
   \   00006D   12....       LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
    227          
    228            // Allow interrupts
    229            osal_int_enable(INTS_ALL);
   \   000070                ; Setup parameters for call to function osal_int_enable
   \   000070   79FF         MOV       R1,#-0x1
   \   000072   12....       LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    230          
    231            // Final board initialization
    232            InitBoard(OB_READY);
   \   000075                ; Setup parameters for call to function InitBoard
   \   000075   7902         MOV       R1,#0x2
   \   000077   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    233          
    234            KEUS_init();
   \   00007A                ; Setup parameters for call to function KEUS_init
   \   00007A   12....       LCALL     `??KEUS_init::?relay`; Banked call to: KEUS_init
    235          
    236            KEUS_loop();
   \   00007D                ; Setup parameters for call to function KEUS_loop
   \   00007D   12....       LCALL     `??KEUS_loop::?relay`; Banked call to: KEUS_loop
    237          
    238            // Display information about this device
    239            zmain_dev_info();
    240          
    241          #ifdef WDT_IN_PM1
    242            /* If WDT is used, this is a good place to enable it. */
    243            WatchDogEnable(WDTIMX);
    244          #endif
    245          
    246            osal_start_system(); // No Return from here
   \   000080                ; Setup parameters for call to function osal_start_system
   \   000080   12....       LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
    247          
    248            return 0; // Shouldn't get here.
   \   000083   7A00         MOV       R2,#0x0
   \   000085   7B00         MOV       R3,#0x0
   \   000087   02....       LJMP      ?BRET
   \   00008A                REQUIRE SLEEPCMD
   \   00008A                REQUIRE SLEEPSTA
   \   00008A                REQUIRE CLKCONCMD
   \   00008A                REQUIRE CLKCONSTA
   \   00008A                REQUIRE _A_P1
   \   00008A                REQUIRE P1DIR
   \   00008A                REQUIRE _A_P0
   \   00008A                REQUIRE P0DIR
   \   00008A                REQUIRE P0INP
    249          } // main()
    250          
    251          
    252          
    253          /*********************************************************************
    254           * @fn      zmain_vdd_check
    255           * @brief   Check if the Vdd is OK to run the processor.
    256           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    257           *********************************************************************/
    258          static void zmain_vdd_check(void)
    259          {
    260            uint8 cnt = 16;
    261          
    262            do
    263            {
    264              while (!HalAdcCheckVdd(VDD_MIN_RUN))
    265                ;
    266            } while (--cnt);
    267          }
    268          
    269          /**************************************************************************************************
    270           * @fn          zmain_ext_addr
    271           *
    272           * @brief       Execute a prioritized search for a valid extended address and write the results
    273           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    274           *
    275           * input parameters
    276           *
    277           * None.
    278           *
    279           * output parameters
    280           *
    281           * None.
    282           *
    283           * @return      None.
    284           **************************************************************************************************
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    288            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    289            uint8 writeNV = TRUE;
    290          
    291            // First check whether a non-erased extended address exists in the OSAL NV.
    292            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL)) ||
    293                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    294                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000019   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V4,R0
   \   000024   89..         MOV       ?V5,R1
   \   000026   F5..         MOV       ?V6,A
   \   000028                ; Setup parameters for call to function osal_nv_item_init
   \   000028   F5..         MOV       ?V8,A
   \   00002A   F5..         MOV       ?V9,A
   \   00002C   78..         MOV       R0,#?V8
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C08         MOV       R4,#0x8
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A01         MOV       R2,#0x1
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7046         JNZ       ??zmain_ext_addr_0
   \   000044                ; Setup parameters for call to function osal_nv_read
   \   000044   75....       MOV       ?V8,#aExtendedAddress & 0xff
   \   000047   75....       MOV       ?V9,#(aExtendedAddress >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V8
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV       ?V8,#0x8
   \   000052   75..00       MOV       ?V9,#0x0
   \   000055   78..         MOV       R0,#?V8
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A01         MOV       R2,#0x1
   \   000060   7B00         MOV       R3,#0x0
   \   000062   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   701D         JNZ       ??zmain_ext_addr_0
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   7C08         MOV       R4,#0x8
   \   000074   7D00         MOV       R5,#0x0
   \   000076   A9..         MOV       R1,?V0
   \   000078   AA..         MOV       R2,?V1
   \   00007A   AB..         MOV       R3,?V2
   \   00007C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007F   7403         MOV       A,#0x3
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??zmain_ext_addr_1 & 0xFFFF
    295            {
    296              // Attempt to read the extended address from the location on the lock bits page
    297              // where the programming tools know to reserve it.
    298              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   00008A                ; Setup parameters for call to function HalFlashRead
   \   00008A   75..08       MOV       ?V8,#0x8
   \   00008D   78..         MOV       R0,#?V8
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000094   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000096   7AE8         MOV       R2,#-0x18
   \   000098   7B07         MOV       R3,#0x7
   \   00009A   797F         MOV       R1,#0x7f
   \   00009C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
    299          
    300              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A4                ; Setup parameters for call to function osal_memcmp
   \   0000A4   78..         MOV       R0,#?V4
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   A9..         MOV       R1,?V0
   \   0000AF   AA..         MOV       R2,?V1
   \   0000B1   AB..         MOV       R3,?V2
   \   0000B3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   6071         JZ        ??zmain_ext_addr_2
    301              {
    302                // Attempt to read the extended address from the designated location in the Info Page.
    303                if (!osal_memcmp((uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000BE                ; Setup parameters for call to function osal_memcmp
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C3   7C08         MOV       R4,#0x8
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   790C         MOV       R1,#0xc
   \   0000C9   7A78         MOV       R2,#0x78
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV       A,R1
   \   0000D6   701D         JNZ       ??zmain_ext_addr_3
    304                {
    305                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   75..0C       MOV       ?V0,#0xc
   \   0000DB   75..78       MOV       ?V1,#0x78
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   7C08         MOV       R4,#0x8
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   0000E9   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   0000EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F3   803A         SJMP      ??zmain_ext_addr_2
    306                }
    307                else // No valid extended address was found.
    308                {
    309                  uint8 idx;
    310          
    311          #if !defined(NV_RESTORE)
    312                  writeNV = FALSE; // Make this a temporary IEEE address
    313          #endif
    314          
    315                  /* Attempt to create a sufficiently random extended address for expediency.
    316                   * Note: this is only valid/legal in a test environment and
    317                   *       must never be used for a commercial product.
    318                   */
    319                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   0000F5   7E00         MOV       R6,#0x0
    320                  {
    321                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   0000F7                ; Setup parameters for call to function osal_rand
   \   0000F7   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000FA   8A..         MOV       ?V0,R2
    322                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   74..         MOV       A,#aExtendedAddress & 0xff
   \   000100   2A           ADD       A,R2
   \   000101   F582         MOV       DPL,A
   \   000103   E4           CLR       A
   \   000104   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000106   F583         MOV       DPH,A
   \   000108   E5..         MOV       A,?V0
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   0E           INC       R6
    323                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   00010C   EE           MOV       A,R6
   \   00010D   F8           MOV       R0,A
   \   00010E   12....       LCALL     ?Subroutine0 & 0xFFFF
    324                  }
   \                     ??CrossCallReturnLabel_0:
   \   000111   EB           MOV       A,R3
   \   000112   F0           MOVX      @DPTR,A
   \   000113   0E           INC       R6
   \   000114   EE           MOV       A,R6
   \   000115   C3           CLR       C
   \   000116   9406         SUBB      A,#0x6
   \   000118   40DD         JC        ??zmain_ext_addr_4
    325                  // Next-to-MSB identifies ZigBee devicetype.
    326          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    327                  aExtendedAddress[idx++] = 0x10;
    328          #elif ZG_BUILD_RTRONLY_TYPE
    329                  aExtendedAddress[idx++] = 0x20;
    330          #else
    331                  aExtendedAddress[idx++] = 0x30;
   \   00011A   08           INC       R0
   \   00011B   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00011E   7430         MOV       A,#0x30
   \   000120   F0           MOVX      @DPTR,A
    332          #endif
    333                  // MSB has historical signficance.
    334                  aExtendedAddress[idx] = 0xF8;
   \   000121   08           INC       R0
   \   000122   74..         MOV       A,#aExtendedAddress & 0xff
   \   000124   28           ADD       A,R0
   \   000125   F582         MOV       DPL,A
   \   000127   E4           CLR       A
   \   000128   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   00012A   F583         MOV       DPH,A
   \   00012C   74F8         MOV       A,#-0x8
   \   00012E   F0           MOVX      @DPTR,A
    335                }
    336              }
    337          
    338              if (writeNV)
    339              {
    340                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00012F                ; Setup parameters for call to function osal_nv_write
   \   00012F   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000132   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000135   78..         MOV       R0,#?V0
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   75..08       MOV       ?V0,#0x8
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140   78..         MOV       R0,#?V0
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   7C00         MOV       R4,#0x0
   \   000147   7D00         MOV       R5,#0x0
   \   000149   7A01         MOV       R2,#0x1
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000150   7404         MOV       A,#0x4
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
    341              }
    342            }
    343          
    344            // Set the MAC PIB extended address according to results from above.
    345            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000155                ; Setup parameters for call to function ZMacSetReq
   \   000155   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000157   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000159   79E2         MOV       R1,#-0x1e
   \   00015B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    346          }
   \   00015E   7408         MOV       A,#0x8
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   7F0A         MOV       R7,#0xa
   \   000165   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV       A,#aExtendedAddress & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEUS INIT">`:
   \   000000   4B455553     DB "KEUS INIT"
   \            20494E49
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16
    347          
    348          #if defined ZCL_KEY_ESTABLISH
    349          /**************************************************************************************************
    350           * @fn          zmain_cert_init
    351           *
    352           * @brief       Initialize the Certicom certificate information.
    353           *
    354           * input parameters
    355           *
    356           * None.
    357           *
    358           * output parameters
    359           *
    360           * None.
    361           *
    362           * @return      None.
    363           **************************************************************************************************
    364           */
    365          static void zmain_cert_init(void)
    366          {
    367            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    368            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    369                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    370                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    371                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    372                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    373                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    374                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    375          
    376            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    377            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    378          
    379            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    380            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    381            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL)) ||
    382                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData)) ||
    383                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    384            {
    385              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    386              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    387                           ZCL_KE_CA_PUBLIC_KEY_LEN);
    388              // If the certificate data is not NULL, use it to update the corresponding NV items.
    389              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    390              {
    391                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    392                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    393                             ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    394                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    395                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    396                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    397                             ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    398                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    399              }
    400            }
    401          }
    402          #endif
    403          
    404          /**************************************************************************************************
    405           * @fn          zmain_dev_info
    406           *
    407           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    408           *
    409           * input parameters
    410           *
    411           * None.
    412           *
    413           * output parameters
    414           *
    415           * None.
    416           *
    417           * @return      None.
    418           **************************************************************************************************
    419           */
    420          static void zmain_dev_info(void)
    421          {
    422          
    423          #if defined(SERIAL_DEBUG_SUPPORTED) || (defined(LEGACY_LCD_DEBUG) && defined(LCD_SUPPORTED))
    424            uint8 i;
    425            uint8 *xad;
    426            uint8 lcd_buf[Z_EXTADDR_LEN * 2 + 1];
    427          
    428            // Display the extended address.
    429            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    430          
    431            for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
    432            {
    433              uint8 ch;
    434              ch = (*xad >> 4) & 0x0F;
    435              lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
    436              ch = *xad & 0x0F;
    437              lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
    438            }
    439            lcd_buf[Z_EXTADDR_LEN * 2] = '\0';
    440            HalLcdWriteString("IEEE: ", HAL_LCD_DEBUG_LINE_1);
    441            HalLcdWriteString((char *)lcd_buf, HAL_LCD_DEBUG_LINE_2);
    442          #endif
    443          }
    444          
    445          #ifdef LCD_SUPPORTED
    446          /*********************************************************************
    447           * @fn      zmain_lcd_init
    448           * @brief   Initialize LCD at start up.
    449           * @return  none
    450           *********************************************************************/
    451          static void zmain_lcd_init(void)
    452          {
    453          #ifdef SERIAL_DEBUG_SUPPORTED
    454            {
    455              HalLcdWriteString("TexasInstruments", HAL_LCD_DEBUG_LINE_1);
    456          
    457          #if defined(MT_MAC_FUNC)
    458          #if defined(ZDO_COORDINATOR)
    459              HalLcdWriteString("MAC-MT Coord", HAL_LCD_DEBUG_LINE_2);
    460          #else
    461              HalLcdWriteString("MAC-MT Device", HAL_LCD_DEBUG_LINE_2);
    462          #endif // ZDO
    463          #elif defined(MT_NWK_FUNC)
    464          #if defined(ZDO_COORDINATOR)
    465              HalLcdWriteString("NWK Coordinator", HAL_LCD_DEBUG_LINE_2);
    466          #else
    467              HalLcdWriteString("NWK Device", HAL_LCD_DEBUG_LINE_2);
    468          #endif // ZDO
    469          #endif // MT_FUNC
    470            }
    471          #endif // SERIAL_DEBUG_SUPPORTED
    472          }
    473          #endif
    474          
    475          /*********************************************************************
    476          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   KEUS_init
        0     10   -> HalUARTWrite
        0     10   -> KeusTimerUtilInit
        0     10   -> KeusTimerUtilStartTimer
        0     10   -> initUart
        0     10   -> keusButtonInit
        0     10   -> osal_strlen
      0     12   KEUS_loop
        0     12   -> HalUARTPoll
        0     12   -> parseUart
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> KEUS_init
        0      0   -> KEUS_loop
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_ext_addr
      1     30   zmain_ext_addr
        0     28   -> HalFlashRead
        0     26   -> ZMacSetReq
        0     29   -> osal_memcmp
        0     29   -> osal_memcpy
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_read
        0     30   -> osal_nv_write
        0     26   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "KEUS INIT">
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
      44  KEUS_init
      43  KEUS_loop
       1  P0DIR
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P0
       1  _A_P1
       4  __Constant_10
       4  keusAppEvents
     138  main
     360  zmain_ext_addr
      24  -- Other

 
 596 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  22 bytes in segment XDATA_ROM_C
   4 bytes in segment XDATA_Z
 
  24 bytes of CODE     memory
  18 bytes of CONST    memory (+ 4 bytes shared)
   0 bytes of DATA     memory (+ 9 bytes shared)
 596 bytes of HUGECODE memory
   4 bytes of XDATA    memory

Errors: none
Warnings: none
