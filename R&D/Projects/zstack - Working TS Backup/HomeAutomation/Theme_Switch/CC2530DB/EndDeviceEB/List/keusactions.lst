###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               08/Jan/2020  12:34:02
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.c
#    Command line       =  
#        -f C:\Users\Souvik\AppData\Local\Temp\EW4FFF.tmp ("D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -D HAL_UART=TRUE
#        -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D
#        HAL_UART_DMA_TX_MAX=64 -D INT_HEAP_LEN=3172 -lC "D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\" -I
#        "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\keus\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List\keusactions.lst
#    Object file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj\keusactions.r51
#
###############################################################################

D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.c
      1          #include "hal_adc.h"
      2          #include "hal_flash.h"
      3          #include "hal_lcd.h"
      4          #include "hal_led.h"
      5          #include "hal_uart.h"
      6          #include "hal_drivers.h"
      7          #include "OnBoard.h"
      8          #include "OSAL.h"
      9          #include "OSAL_Nv.h"
     10          #include "ZComDef.h"
     11          #include "ZMAC.h"
     12          #include "keus_gpio_util.h"
     13          #include "keus_timer_util.h"
     14          #include "keusactions.h"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 commandId
   \                     commandId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 uartDataBuffer[12]
   \                     uartDataBuffer:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   KeusGPIOPin ledPin
   \                     ledPin:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   KeusGPIOPin ledPin2
   \                     ledPin2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for ledPin2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   uint8 scene_arr[4]
   \                     scene_arr:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for scene_arr>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   bool debugModeActive
   \                     debugModeActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 debugSequence
   \                     debugSequence:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next

  volatile uint8 buttonPressOrder[MAX_NO_OF_BUTTON] = 0;
                                                      ^
"D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.h",53  Warning[Pe520]: 
          initialization with "{...}" expected for aggregate object
   \   uint8 volatile buttonPressOrder[4]
   \                     buttonPressOrder:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   KeusTimerConfig ledBlinker
   \                     ledBlinker:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for ledBlinker>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   KeusTimerConfig debugSequenceTimer
   \                     debugSequenceTimer:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for debugSequenceTimer>`
   \   000008                REQUIRE __INIT_XDATA_I
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          void debugSequenceTimerCbk(uint8 timerId)
   \                     debugSequenceTimerCbk:
     17          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     18              debugSequence = 0;
   \   000004   90....       MOV       DPTR,#debugSequence
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
     19              KeusTimerUtilRemoveTimer(&debugSequenceTimer);
   \   000009                ; Setup parameters for call to function KeusTimerUtilRemoveTimer
   \   000009   7A..         MOV       R2,#debugSequenceTimer & 0xff
   \   00000B   7B..         MOV       R3,#(debugSequenceTimer >> 8) & 0xff
   \   00000D                REQUIRE ?Subroutine1
   \   00000D                ; // Fall through to label ?Subroutine1
     20          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     `??KeusTimerUtilRemoveTimer::?relay`; Banked call to: KeusTimerUtilRemoveTimer
   \   000003   02....       LJMP      ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
     21          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     22          void enterDebugMode(void)
   \                     enterDebugMode:
     23          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
     24              debugModeActive = 1;
   \   000009   90....       MOV       DPTR,#debugModeActive
   \   00000C   7401         MOV       A,#0x1
   \   00000E   F0           MOVX      @DPTR,A
     25              ledPin.state = LED_ON;
   \   00000F   90....       MOV       DPTR,#ledPin + 4
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
     26              KeusGPIOSetPinValue(&ledPin);
   \   000014                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000014   7A..         MOV       R2,#ledPin & 0xff
   \   000016   7B..         MOV       R3,#(ledPin >> 8) & 0xff
   \   000018   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
     27              uint8 sendReply[2] = {DEBUG_INFORMATION, DEBUG_TURNED_ON};
   \   00001B   90....       MOV       DPTR,#`?<Constant {2, 1}>`
   \   00001E   80..         SJMP      ?Subroutine0
     28              UART_tx(sendReply, 2);
     29          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004   7402         MOV       A,#0x2
   \   000006   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000009                ; Setup parameters for call to function UART_tx
   \   000009                ; Setup parameters for call to function UART_tx
   \   000009   7902         MOV       R1,#0x2
   \   00000B   AA..         MOV       R2,?XSP + 0
   \   00000D   AB..         MOV       R3,?XSP + 1
   \   00000F   12....       LCALL     `??UART_tx::?relay`; Banked call to: UART_tx
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?DEALLOC_XSTACK8
   \   000017                REQUIRE ??Subroutine5_0
   \   000017                ; // Fall through to label ??Subroutine5_0
     30          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     31          void exitDebugMode(void)
   \                     exitDebugMode:
     32          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
     33              debugModeActive = 0;
   \   000009   90....       MOV       DPTR,#debugModeActive
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
     34              ledPin.state = LED_OFF;
   \   00000E   90....       MOV       DPTR,#ledPin + 4
   \   000011   04           INC       A
   \   000012   F0           MOVX      @DPTR,A
     35              ledPin2.state = LED_OFF;
   \   000013   90....       MOV       DPTR,#ledPin2 + 4
   \   000016   F0           MOVX      @DPTR,A
     36              KeusGPIOSetPinValue(&ledPin);
   \   000017                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000017   12....       LCALL     ?Subroutine4 & 0xFFFF
     37              KeusGPIOSetPinValue(&ledPin2);
     38              uint8 sendReply[2] = {DEBUG_INFORMATION, DEBUG_TURNED_OFF};
   \                     ??CrossCallReturnLabel_5:
   \   00001A   90....       MOV       DPTR,#`?<Constant {2, 2}>`
   \   00001D   80..         SJMP      ?Subroutine0
     39              UART_tx(sendReply, 2);
     40          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7A..         MOV       R2,#ledPin & 0xff
   \   000002   7B..         MOV       R3,#(ledPin >> 8) & 0xff
   \   000004   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
   \   000007                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000007                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000007   7A..         MOV       R2,#ledPin2 & 0xff
   \   000009   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   00000B   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
   \   00000E   22           RET
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          void blinkerTimerCbk(uint8 timerId)
   \                     blinkerTimerCbk:
     43          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     44              if (!debugModeActive)
   \   000004   90....       MOV       DPTR,#debugModeActive
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700C         JNZ       ??blinkerTimerCbk_0
     45              {
     46                  ledPin.state = LED_OFF;
   \   00000A   90....       MOV       DPTR,#ledPin + 4
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
     47                  KeusGPIOSetPinValue(&ledPin);
   \   000010                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000010   7A..         MOV       R2,#ledPin & 0xff
   \   000012   7B..         MOV       R3,#(ledPin >> 8) & 0xff
   \   000014   800A         SJMP      ??blinkerTimerCbk_1
     48              }
     49              else
     50              {
     51                  ledPin2.state = LED_OFF;
   \                     ??blinkerTimerCbk_0:
   \   000016   90....       MOV       DPTR,#ledPin2 + 4
   \   000019   7401         MOV       A,#0x1
   \   00001B   F0           MOVX      @DPTR,A
     52                  KeusGPIOSetPinValue(&ledPin2);
   \   00001C                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   00001C   7A..         MOV       R2,#ledPin2 & 0xff
   \   00001E   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \                     ??blinkerTimerCbk_1:
   \   000020   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
     53              }
     54              KeusTimerUtilRemoveTimer(&ledBlinker);
   \   000023                ; Setup parameters for call to function KeusTimerUtilRemoveTimer
   \   000023   7A..         MOV       R2,#ledBlinker & 0xff
   \   000025   7B..         MOV       R3,#(ledBlinker >> 8) & 0xff
   \   000027   80..         SJMP      ?Subroutine1
     55          }
     56          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     57          void blinkLED(void)
   \                     blinkLED:
     58          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     59              if (!debugModeActive)
   \   000004   90....       MOV       DPTR,#debugModeActive
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700B         JNZ       ??blinkLED_0
     60              {
     61                  ledPin.state = LED_ON;
   \   00000A   90....       MOV       DPTR,#ledPin + 4
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
     62                  KeusGPIOSetPinValue(&ledPin);
   \   00000F                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   00000F   7A..         MOV       R2,#ledPin & 0xff
   \   000011   7B..         MOV       R3,#(ledPin >> 8) & 0xff
   \   000013   8009         SJMP      ??blinkLED_1
     63              }
     64              else
     65              {
     66                  ledPin2.state = LED_ON;
   \                     ??blinkLED_0:
   \   000015   90....       MOV       DPTR,#ledPin2 + 4
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
     67                  KeusGPIOSetPinValue(&ledPin2);
   \   00001A                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   00001A   7A..         MOV       R2,#ledPin2 & 0xff
   \   00001C   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \                     ??blinkLED_1:
   \   00001E   12....       LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
     68              }
     69              KeusTimerUtilAddTimer(&ledBlinker);
   \   000021                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000021   7A..         MOV       R2,#ledBlinker & 0xff
   \   000023   7B..         MOV       R3,#(ledBlinker >> 8) & 0xff
   \   000025   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
     70          }
   \   000028   80..         SJMP      ??Subroutine5_0
     71          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void keusLEDInit(void)
   \                     keusLEDInit:
     73          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     74              KeusGPIOSetDirection(&ledPin);
   \   000004                ; Setup parameters for call to function KeusGPIOSetDirection
   \   000004   7A..         MOV       R2,#ledPin & 0xff
   \   000006   7B..         MOV       R3,#(ledPin >> 8) & 0xff
   \   000008   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
     75              KeusGPIOSetDirection(&ledPin2);
   \   00000B                ; Setup parameters for call to function KeusGPIOSetDirection
   \   00000B   7A..         MOV       R2,#ledPin2 & 0xff
   \   00000D   7B..         MOV       R3,#(ledPin2 >> 8) & 0xff
   \   00000F   12....       LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
     76              KeusGPIOSetPinValue(&ledPin);
   \   000012                ; Setup parameters for call to function KeusGPIOSetPinValue
   \   000012   12....       LCALL     ?Subroutine4 & 0xFFFF
     77              KeusGPIOSetPinValue(&ledPin2);
     78          }
   \                     ??CrossCallReturnLabel_6:
   \   000015   80..         SJMP      ??Subroutine5_0
     79          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     80          void parseUart(void)
   \                     parseUart:
     81          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     82              int i = 0;
   \   000004   7800         MOV       R0,#0x0
   \   000006   7900         MOV       R1,#0x0
     83              commandId = g0_u8RecData[0];
   \   000008   90....       MOV       DPTR,#g0_u8RecData
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   90....       MOV       DPTR,#commandId
   \   00000F   F0           MOVX      @DPTR,A
     84          
     85              for (i = 0; i < MAX_UART_DATA_BUFFER; i++)
     86              {
     87                  uartDataBuffer[i] = g0_u8RecData[i + 1];
   \                     ??parseUart_0:
   \   000010   74..         MOV       A,#(g0_u8RecData + 1) & 0xff
   \   000012   28           ADD       A,R0
   \   000013   F582         MOV       DPL,A
   \   000015   74..         MOV       A,#((g0_u8RecData + 1) >> 8) & 0xff
   \   000017   39           ADDC      A,R1
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   C0E0         PUSH      A
   \   00001D   74..         MOV       A,#uartDataBuffer & 0xff
   \   00001F   28           ADD       A,R0
   \   000020   F582         MOV       DPL,A
   \   000022   74..         MOV       A,#(uartDataBuffer >> 8) & 0xff
   \   000024   39           ADDC      A,R1
   \   000025   F583         MOV       DPH,A
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
     88              }
   \   00002A   08           INC       R0
   \   00002B   E8           MOV       A,R0
   \   00002C   7001         JNZ       ??parseUart_1
   \   00002E   09           INC       R1
   \                     ??parseUart_1:
   \   00002F   C3           CLR       C
   \   000030   940C         SUBB      A,#0xc
   \   000032   E9           MOV       A,R1
   \   000033   9400         SUBB      A,#0x0
   \   000035   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000037   65D0         XRL       A,PSW
   \   000039   33           RLC       A
   \   00003A   40D4         JC        ??parseUart_0
     89          
     90              taskHandler();
   \   00003C                ; Setup parameters for call to function taskHandler
   \   00003C   12....       LCALL     `??taskHandler::?relay`; Banked call to: taskHandler
     91          }
   \   00003F   80..         SJMP      ??Subroutine5_0
     92          
     93          //Calls the required function as needed by UART received message

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          void taskHandler(void)
   \                     taskHandler:
     95          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     96              switch (commandId)
   \   000004   90....       MOV       DPTR,#commandId
   \   000007   E0           MOVX      A,@DPTR
   \   000008   14           DEC       A
   \   000009   6008         JZ        ??taskHandler_0
   \   00000B   14           DEC       A
   \   00000C   600A         JZ        ??taskHandler_1
   \   00000E   14           DEC       A
   \   00000F   600C         JZ        ??taskHandler_2
   \   000011   800D         SJMP      ??taskHandler_3
     97              {
     98              case TASK_MAP_SWITCH:
     99                  mapSwitch();
   \                     ??taskHandler_0:
   \   000013                ; Setup parameters for call to function mapSwitch
   \   000013   12....       LCALL     `??mapSwitch::?relay`; Banked call to: mapSwitch
    100                  break;
   \   000016   8008         SJMP      ??taskHandler_3
    101              case TASK_ENTER_DEBUG:
    102                  enterDebugMode();
   \                     ??taskHandler_1:
   \   000018                ; Setup parameters for call to function enterDebugMode
   \   000018   12....       LCALL     `??enterDebugMode::?relay`; Banked call to: enterDebugMode
    103                  break;
   \   00001B   8003         SJMP      ??taskHandler_3
    104              case TASK_EXIT_DEBUG:
    105                  exitDebugMode();
   \                     ??taskHandler_2:
   \   00001D                ; Setup parameters for call to function exitDebugMode
   \   00001D   12....       LCALL     `??exitDebugMode::?relay`; Banked call to: exitDebugMode
    106                  break;
    107          
    108              default:
    109                  break;
    110              }
    111          }
   \                     ??taskHandler_3:
   \   000020   02....       LJMP      ??Subroutine5_0 & 0xFFFF
    112          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          void mapSwitch(void)
   \                     mapSwitch:
    114          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    115              //Example msg: 28 06 01 | 02 01 54 02 64 | 29
    116              int noOfSwitch = uartDataBuffer[0];
   \   00000A   90....       MOV       DPTR,#uartDataBuffer
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FE           MOV       R6,A
    117              uint8 position = 0, switchId, sceneID;
   \   00000F   7A00         MOV       R2,#0x0
    118          
    119              for (int i = 0; i < noOfSwitch; i++)
   \   000011   7C00         MOV       R4,#0x0
   \   000013   7D00         MOV       R5,#0x0
   \   000015   800A         SJMP      ??mapSwitch_0
    120              {
    121                  switchId = uartDataBuffer[position + 1];
    122                  sceneID = uartDataBuffer[position + 2];
    123                  position += 2;
    124                  switch (switchId)
    125                  {
    126                  case BUTTON1_ID:
    127                      scene_arr[0] = sceneID;
    128                      break;
    129                  case BUTTON2_ID:
    130                      scene_arr[1] = sceneID;
    131                      break;
    132                  case BUTTON3_ID:
    133                      scene_arr[2] = sceneID;
    134                      break;
    135                  case BUTTON4_ID:
    136                      scene_arr[3] = sceneID;
   \                     ??mapSwitch_1:
   \   000017   E8           MOV       A,R0
   \   000018   90....       MOV       DPTR,#scene_arr + 3
   \                     ??mapSwitch_2:
   \   00001B   F0           MOVX      @DPTR,A
    137                      break;
   \                     ??mapSwitch_3:
   \   00001C   0C           INC       R4
   \   00001D   EC           MOV       A,R4
   \   00001E   7001         JNZ       ??mapSwitch_0
   \   000020   0D           INC       R5
   \                     ??mapSwitch_0:
   \   000021   C3           CLR       C
   \   000022   EC           MOV       A,R4
   \   000023   9E           SUBB      A,R6
   \   000024   ED           MOV       A,R5
   \   000025   9400         SUBB      A,#0x0
   \   000027   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000029   65D0         XRL       A,PSW
   \   00002B   33           RLC       A
   \   00002C   503C         JNC       ??mapSwitch_4
   \   00002E   EA           MOV       A,R2
   \   00002F   F8           MOV       R0,A
   \   000030   74..         MOV       A,#uartDataBuffer & 0xff
   \   000032   28           ADD       A,R0
   \   000033   F8           MOV       R0,A
   \   000034   E4           CLR       A
   \   000035   34..         ADDC      A,#(uartDataBuffer >> 8) & 0xff
   \   000037   F9           MOV       R1,A
   \   000038   8882         MOV       DPL,R0
   \   00003A   F583         MOV       DPH,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FB           MOV       R3,A
   \   00003F   8882         MOV       DPL,R0
   \   000041   8983         MOV       DPH,R1
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   0A           INC       R2
   \   000048   0A           INC       R2
   \   000049   EB           MOV       A,R3
   \   00004A   14           DEC       A
   \   00004B   600B         JZ        ??mapSwitch_5
   \   00004D   14           DEC       A
   \   00004E   600E         JZ        ??mapSwitch_6
   \   000050   14           DEC       A
   \   000051   6011         JZ        ??mapSwitch_7
   \   000053   14           DEC       A
   \   000054   60C1         JZ        ??mapSwitch_1
   \   000056   80C4         SJMP      ??mapSwitch_3
   \                     ??mapSwitch_5:
   \   000058   E8           MOV       A,R0
   \   000059   90....       MOV       DPTR,#scene_arr
   \   00005C   80BD         SJMP      ??mapSwitch_2
   \                     ??mapSwitch_6:
   \   00005E   E8           MOV       A,R0
   \   00005F   90....       MOV       DPTR,#scene_arr + 1
   \   000062   80B7         SJMP      ??mapSwitch_2
   \                     ??mapSwitch_7:
   \   000064   E8           MOV       A,R0
   \   000065   90....       MOV       DPTR,#scene_arr + 2
   \   000068   80B1         SJMP      ??mapSwitch_2
    138          
    139                  default:
    140                      break;
    141                  }
    142              }
    143              uint8 sendReply[1] = {KEUS_UART_MSG_ACK};
   \                     ??mapSwitch_4:
   \   00006A   90....       MOV       DPTR,#`?<Constant {5}>`
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   7401         MOV       A,#0x1
   \   000073   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    144              UART_tx(sendReply, 1);
   \   000076                ; Setup parameters for call to function UART_tx
   \   000076   7901         MOV       R1,#0x1
   \   000078   AA..         MOV       R2,?XSP + 0
   \   00007A   AB..         MOV       R3,?XSP + 1
   \   00007C   12....       LCALL     `??UART_tx::?relay`; Banked call to: UART_tx
    145              //KeusUartAckMsg(KEUS_UART_MSG_ACK);
    146          }
   \   00007F   7401         MOV       A,#0x1
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   7F01         MOV       R7,#0x1
   \   000086   02....       LJMP      ?BANKED_LEAVE_XDATA
    147          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          void buttonPressAction(uint8 buttonId)
   \                     buttonPressAction:
    149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    150              uint8 sendReply[2] = {EXECUTE_SCENE_COMMAND, 0};
   \   00000A   90....       MOV       DPTR,#`?<Constant {1, 0}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    151              if (debugModeActive)
   \   000016   90....       MOV       DPTR,#debugModeActive
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6032         JZ        ??buttonPressAction_0
    152              {
    153                  switch (buttonId)
   \   00001C   E9           MOV       A,R1
   \   00001D   14           DEC       A
   \   00001E   600C         JZ        ??buttonPressAction_1
   \   000020   14           DEC       A
   \   000021   600E         JZ        ??buttonPressAction_2
   \   000023   14           DEC       A
   \   000024   6010         JZ        ??buttonPressAction_3
   \   000026   14           DEC       A
   \   000027   6012         JZ        ??buttonPressAction_4
   \   000029   02....       LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
    154                  {
    155                  case BUTTON1_ID:
    156                      keusAppEvents |= KEUS_APP_EVT1;
   \                     ??buttonPressAction_1:
   \   00002C   90....       MOV       DPTR,#__Constant_20
   \   00002F   800D         SJMP      ??buttonPressAction_5
    157                      break;
    158          
    159                  case BUTTON2_ID:
    160                      keusAppEvents |= KEUS_APP_EVT2;
   \                     ??buttonPressAction_2:
   \   000031   90....       MOV       DPTR,#__Constant_40
   \   000034   8008         SJMP      ??buttonPressAction_5
    161                      break;
    162          
    163                  case BUTTON3_ID:
    164                      keusAppEvents |= KEUS_APP_EVT3;
   \                     ??buttonPressAction_3:
   \   000036   90....       MOV       DPTR,#__Constant_80
   \   000039   8003         SJMP      ??buttonPressAction_5
    165                      break;
    166          
    167                  case BUTTON4_ID:
    168                      keusAppEvents |= KEUS_APP_EVT4;
   \                     ??buttonPressAction_4:
   \   00003B   90....       MOV       DPTR,#__Constant_100
   \                     ??buttonPressAction_5:
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?L_MOV_X
   \   000043   90....       MOV       DPTR,#keusAppEvents
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?L_IOR_TO_X
    169                      break;
   \   00004B   02....       LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
    170                  default:
    171                      break;
    172                  }
    173              }
    174              else
    175              {
    176                  switch (buttonId)
   \                     ??buttonPressAction_0:
   \   00004E   E9           MOV       A,R1
   \   00004F   14           DEC       A
   \   000050   600B         JZ        ??buttonPressAction_6
   \   000052   14           DEC       A
   \   000053   601C         JZ        ??buttonPressAction_7
   \   000055   14           DEC       A
   \   000056   6045         JZ        ??buttonPressAction_8
   \   000058   14           DEC       A
   \   000059   6056         JZ        ??buttonPressAction_9
   \   00005B   8074         SJMP      ??CrossCallReturnLabel_4
    177                  {
    178                  case BUTTON1_ID:
    179                      if (debugSequence & KEUS_BUTTON4)
   \                     ??buttonPressAction_6:
   \   00005D   90....       MOV       DPTR,#debugSequence
   \   000060   E0           MOVX      A,@DPTR
   \   000061   A2E3         MOV       C,0xE0 /* A   */.3
   \   000063   5007         JNC       ??buttonPressAction_10
    180                      {
    181                          KeusTimerUtilRemoveTimer(&debugSequenceTimer);
   \   000065                ; Setup parameters for call to function KeusTimerUtilRemoveTimer
   \   000065   12....       LCALL     ?Subroutine2 & 0xFFFF
    182                          KeusTimerUtilAddTimer(&debugSequenceTimer);
    183                          debugSequence |= KEUS_BUTTON1;
    184                      }
   \                     ??CrossCallReturnLabel_0:
   \   000068   D2E0         SETB      0xE0 /* A   */.0
   \   00006A   8052         SJMP      ??buttonPressAction_11
    185                      else
    186                      {
    187                          sendReply[1] = scene_arr[0];
   \                     ??buttonPressAction_10:
   \   00006C   90....       MOV       DPTR,#scene_arr
   \   00006F   8053         SJMP      ??buttonPressAction_12
    188                          UART_tx(sendReply, 2);
    189                      }
    190                      break;
    191          
    192                  case BUTTON2_ID:
    193                      if (debugSequence == 15)
   \                     ??buttonPressAction_7:
   \   000071   90....       MOV       DPTR,#debugSequence
   \   000074   E0           MOVX      A,@DPTR
   \   000075   640F         XRL       A,#0xf
   \   000077   7005         JNZ       ??buttonPressAction_13
    194                      {
    195                          enterDebugMode();
   \   000079                ; Setup parameters for call to function enterDebugMode
   \   000079   12....       LCALL     `??enterDebugMode::?relay`; Banked call to: enterDebugMode
   \   00007C   8053         SJMP      ??CrossCallReturnLabel_4
    196                      }
    197                      else
    198                      {
    199                          sendReply[1] = scene_arr[1];
   \                     ??buttonPressAction_13:
   \   00007E   90....       MOV       DPTR,#scene_arr + 1
   \   000081   E0           MOVX      A,@DPTR
   \   000082   C0E0         PUSH      A
   \   000084   7401         MOV       A,#0x1
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   D0E0         POP       A
   \   00008B   12....       LCALL     ?Subroutine3 & 0xFFFF
    200                          UART_tx(sendReply, 2);
    201                          KeusTimerUtilAddTimer(&debugSequenceTimer);
   \                     ??CrossCallReturnLabel_3:
   \   00008E                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   00008E   7A..         MOV       R2,#debugSequenceTimer & 0xff
   \   000090   7B..         MOV       R3,#(debugSequenceTimer >> 8) & 0xff
   \   000092   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
    202                          debugSequence |= KEUS_BUTTON2;
   \   000095   90....       MOV       DPTR,#debugSequence
   \   000098   E0           MOVX      A,@DPTR
   \   000099   D2E1         SETB      0xE0 /* A   */.1
   \   00009B   8021         SJMP      ??buttonPressAction_11
    203                      }
    204                      break;
    205          
    206                  case BUTTON3_ID:
    207                      if (debugSequence & KEUS_BUTTON2)
   \                     ??buttonPressAction_8:
   \   00009D   90....       MOV       DPTR,#debugSequence
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000A3   5007         JNC       ??buttonPressAction_14
    208                      {
    209                          KeusTimerUtilRemoveTimer(&debugSequenceTimer);
   \   0000A5                ; Setup parameters for call to function KeusTimerUtilRemoveTimer
   \   0000A5   12....       LCALL     ?Subroutine2 & 0xFFFF
    210                          KeusTimerUtilAddTimer(&debugSequenceTimer);
    211                          debugSequence |= KEUS_BUTTON3;
    212                      }
   \                     ??CrossCallReturnLabel_1:
   \   0000A8   D2E2         SETB      0xE0 /* A   */.2
   \   0000AA   8012         SJMP      ??buttonPressAction_11
    213                      else
    214                      {
    215                          sendReply[1] = scene_arr[2];
   \                     ??buttonPressAction_14:
   \   0000AC   90....       MOV       DPTR,#scene_arr + 2
   \   0000AF   8013         SJMP      ??buttonPressAction_12
    216                          UART_tx(sendReply, 2);
    217                      }
    218                      break;
    219          
    220                  case BUTTON4_ID:
    221                      if (debugSequence & KEUS_BUTTON3)
   \                     ??buttonPressAction_9:
   \   0000B1   90....       MOV       DPTR,#debugSequence
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000B7   5008         JNC       ??buttonPressAction_15
    222                      {
    223                          KeusTimerUtilRemoveTimer(&debugSequenceTimer);
   \   0000B9                ; Setup parameters for call to function KeusTimerUtilRemoveTimer
   \   0000B9   12....       LCALL     ?Subroutine2 & 0xFFFF
    224                          KeusTimerUtilAddTimer(&debugSequenceTimer);
    225                          debugSequence |= KEUS_BUTTON4;
    226                      }
   \                     ??CrossCallReturnLabel_2:
   \   0000BC   D2E3         SETB      0xE0 /* A   */.3
   \                     ??buttonPressAction_11:
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   8010         SJMP      ??CrossCallReturnLabel_4
    227                      else
    228                      {
    229                          sendReply[1] = scene_arr[3];
   \                     ??buttonPressAction_15:
   \   0000C1   90....       MOV       DPTR,#scene_arr + 3
   \                     ??buttonPressAction_12:
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   C0E0         PUSH      A
   \   0000C7   7401         MOV       A,#0x1
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   D0E0         POP       A
    230                          UART_tx(sendReply, 2);
    231                      }
    232                      break;
    233                  default:
    234                      break;
    235                  }
    236                  // blinkLED();
    237              }
   \   0000CE   12....       LCALL     ?Subroutine3 & 0xFFFF
    238              blinkLED();
   \                     ??CrossCallReturnLabel_4:
   \   0000D1                ; Setup parameters for call to function blinkLED
   \   0000D1   12....       LCALL     `??blinkLED::?relay`; Banked call to: blinkLED
    239          }
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D9   7F04         MOV       R7,#0x4
   \   0000DB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function UART_tx
   \   000001                ; Setup parameters for call to function UART_tx
   \   000001   7902         MOV       R1,#0x2
   \   000003   AA..         MOV       R2,?XSP + 0
   \   000005   AB..         MOV       R3,?XSP + 1
   \   000007   12....       LCALL     `??UART_tx::?relay`; Banked call to: UART_tx
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A..         MOV       R2,#debugSequenceTimer & 0xff
   \   000002   7B..         MOV       R3,#(debugSequenceTimer >> 8) & 0xff
   \   000004   12....       LCALL     `??KeusTimerUtilRemoveTimer::?relay`; Banked call to: KeusTimerUtilRemoveTimer
   \   000007                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000007                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000007                ; Setup parameters for call to function KeusTimerUtilAddTimer
   \   000007   7A..         MOV       R2,#debugSequenceTimer & 0xff
   \   000009   7B..         MOV       R3,#(debugSequenceTimer >> 8) & 0xff
   \   00000B   12....       LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
   \   00000E   90....       MOV       DPTR,#debugSequence
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledPin2>`:
   \   000000   00           DB 0
   \   000001   01           DB 1
   \   000002   01           DB 1
   \   000003   00           DB 0
   \   000004   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for scene_arr>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ledBlinker>`:
   \   000000   ....         DW `??blinkerTimerCbk::?relay`
   \   000002   6400         DW 100
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for debugSequenceTimer>`:
   \   000000   ....         DW `??debugSequenceTimerCbk::?relay`
   \   000002   F401         DW 500
   \   000004   01           DB 1
   \   000005   FF           DB -1
   \   000006   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {2, 1}>`:
   \   000000   02           DB 2
   \   000001   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {2, 2}>`:
   \   000000   02           DB 2
   \   000001   02           DB 2

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {5}>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 0}>`:
   \   000000   01           DB 1
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_20:
   \   000000   20000000     DD 32

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40:
   \   000000   40000000     DD 64

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_80:
   \   000000   80000000     DD 128

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_100:
   \   000000   00010000     DD 256

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     14   blinkLED
        2      0   -> KeusGPIOSetPinValue
        2      0   -> KeusTimerUtilAddTimer
      2      0   blinkerTimerCbk
        2      0   -> KeusGPIOSetPinValue
        2      0   -> KeusTimerUtilRemoveTimer
      1     14   buttonPressAction
        0     14   -> KeusTimerUtilAddTimer
        0     14   -> KeusTimerUtilRemoveTimer
        0     14   -> UART_tx
        0     14   -> blinkLED
        0     14   -> enterDebugMode
      2      0   debugSequenceTimerCbk
        2      0   -> KeusTimerUtilRemoveTimer
      2     16   enterDebugMode
        2      2   -> KeusGPIOSetPinValue
        2      2   -> UART_tx
      2      2   exitDebugMode
        2      2   -> KeusGPIOSetPinValue
        2      2   -> UART_tx
      2      0   keusLEDInit
        2      0   -> KeusGPIOSetDirection
        2      0   -> KeusGPIOSetPinValue
      0     10   mapSwitch
        0     10   -> UART_tx
      3      0   parseUart
        2      0   -> taskHandler
      2      0   taskHandler
        2      0   -> enterDebugMode
        2      0   -> exitDebugMode
        2      0   -> mapSwitch


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {1, 0}>
       2  ?<Constant {2, 1}>
       2  ?<Constant {2, 2}>
       1  ?<Constant {5}>
       8  ?<Initializer for debugSequenceTimer>
       8  ?<Initializer for ledBlinker>
       5  ?<Initializer for ledPin2>
       5  ?<Initializer for ledPin>
       4  ?<Initializer for scene_arr>
       7  ??Subroutine5_0
      23  ?Subroutine0
       6  ?Subroutine1
      19  ?Subroutine2
      11  ?Subroutine3
      15  ?Subroutine4
       4  __Constant_100
       4  __Constant_20
       4  __Constant_40
       4  __Constant_80
      42  blinkLED
      41  blinkerTimerCbk
     222  buttonPressAction
       4  buttonPressOrder
       1  commandId
       1  debugModeActive
       1  debugSequence
       8  debugSequenceTimer
      13  debugSequenceTimerCbk
      32  enterDebugMode
      31  exitDebugMode
      23  keusLEDInit
       8  ledBlinker
       5  ledPin
       5  ledPin2
     137  mapSwitch
      65  parseUart
       4  scene_arr
      35  taskHandler
      12  uartDataBuffer
      60  -- Other

 
 722 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
  30 bytes in segment XDATA_I
  30 bytes in segment XDATA_ID
  23 bytes in segment XDATA_ROM_C
  19 bytes in segment XDATA_Z
 
  90 bytes of CODE     memory
   7 bytes of CONST    memory (+ 16 bytes shared)
 722 bytes of HUGECODE memory
  49 bytes of XDATA    memory

Errors: none
Warnings: 1
