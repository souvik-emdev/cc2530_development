###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               08/Jan/2020  12:51:20
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS Backup\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f C:\Users\Souvik\AppData\Local\Temp\EW27E4.tmp ("D:\VB_Shared\Zigbee
#        Resources\CC2530 Development\Projects\zstack - Working TS
#        Backup\ZMain\TI2530DB\ZMain.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D HAL_KEY=FALSE -D HAL_LCD=FALSE -D
#        HAL_LED=FALSE -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -D
#        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D
#        HAL_UART_DMA_RX_MAX=64 -D HAL_UART_DMA_TX_MAX=64 -D INT_HEAP_LEN=3172
#        -lC "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack
#        - Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List" -lA
#        "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack - Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\VB_Shared\Zigbee
#        Resources\CC2530 Development\Projects\zstack - Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS Backup\HomeAutomation\Theme_Switch\CC2530DB\" -I
#        "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS Backup\HomeAutomation\Theme_Switch\CC2530DB\..\Source\" -I
#        "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\keus\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List\ZMain.lst
#    Object file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack -
#        Working TS
#        Backup\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj\ZMain.r51
#
###############################################################################

D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack - Working TS Backup\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2020-06-01 18:54:30 -0700 (Monday, 06 Jan 2020) $
      4          
      5            Description:    Mapping Scene to buttons
      6                            Blinking indication LEDs
      7                            Keus Theme Switch
      8          
      9            Notes:          This version targets the Chipcon CC2530
     10          
     11          
     12          
     13          **************************************************************************************************/
     14          
     15          /*********************************************************************
     16           * INCLUDES
     17           */
     18          
     19          #ifndef NONWK
     20          #include "AF.h"
     21          #endif
     22          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     23          #include "hal_flash.h"
     24          #include "hal_lcd.h"
     25          #include "hal_led.h"
     26          #include "hal_uart.h"
     27          #include "hal_drivers.h"
     28          #include "OnBoard.h"
     29          #include "OSAL.h"
     30          #include "OSAL_Nv.h"
     31          #include "ZComDef.h"
     32          #include "ZMAC.h"
     33          
     34          /*********************************************************************
     35           * CUSTOM CODE
     36           */
     37          
     38          extern void KEUS_init(uint8 taskID);
     39          extern void KEUS_loop(void);
     40          
     41          /*********************************************************************
     42           * LOCAL FUNCTIONS
     43           */
     44          
     45          static void zmain_ext_addr(void);
     46          #if defined ZCL_KEY_ESTABLISH
     47          static void zmain_cert_init(void);
     48          #endif
     49          static void zmain_dev_info(void);
     50          static void zmain_vdd_check(void);
     51          
     52          #ifdef LCD_SUPPORTED
     53          static void zmain_lcd_init(void);
     54          #endif
     55          
     56          /*********************************************************************
     57           * @fn      main
     58           * @brief   First function called after startup.
     59           * @return  don't care
     60           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          int main(void)
   \                     main:
     62          {
   \   000000                ; Auto size: 0
     63            // Turn off interrupts
     64            osal_int_disable(INTS_ALL);
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV       R1,#-0x1
   \   000002   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     65          
     66            // Initialization for board related stuff such as LEDs
     67            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL       0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV       A,0x9d
   \   00000A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000C   50FA         JNC       ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV       R0,#-0x8
   \   000011   7901         MOV       R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV       A,R0
   \   000015   24FF         ADD       A,#-0x1
   \   000017   18           DEC       R0
   \   000018   E9           MOV       A,R1
   \   000019   34FF         ADDC      A,#-0x1
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   70F3         JNZ       ??main_1
   \   000020   75C600       MOV       0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV       A,0x9e
   \   000025   70FC         JNZ       ??main_2
   \   000027   43BE04       ORL       0xbe,#0x4
   \   00002A   906270       MOV       DPTR,#0x6270
   \   00002D   7408         MOV       A,#0x8
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   C290         CLR       0x90.0
   \   000032   43FE01       ORL       0xfe,#0x1
   \   000035   C291         CLR       0x90.1
   \   000037   43FE02       ORL       0xfe,#0x2
   \   00003A   C294         CLR       0x90.4
   \   00003C   43FE10       ORL       0xfe,#0x10
   \   00003F   C281         CLR       0x80.1
   \   000041   43FD02       ORL       0xfd,#0x2
   \   000044   438F01       ORL       0x8f,#0x1
     68          
     69            // Make sure supply voltage is high enough to run
     70            zmain_vdd_check();
   \   000047   7E10         MOV       R6,#0x10
   \                     ??main_3:
   \   000049                ; Setup parameters for call to function HalAdcCheckVdd
   \   000049   794E         MOV       R1,#0x4e
   \   00004B   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00004E   E9           MOV       A,R1
   \   00004F   60F8         JZ        ??main_3
   \   000051   1E           DEC       R6
   \   000052   EE           MOV       A,R6
   \   000053   70F4         JNZ       ??main_3
     71          
     72            // Initialize board I/O
     73            InitBoard(OB_COLD);
   \   000055                ; Setup parameters for call to function InitBoard
   \   000055   7900         MOV       R1,#0x0
   \   000057   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
     74          
     75            // Initialze HAL drivers
     76            HalDriverInit();
   \   00005A                ; Setup parameters for call to function HalDriverInit
   \   00005A   12....       LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
     77          
     78            // Initialize NV System
     79            osal_nv_init(NULL);
   \   00005D                ; Setup parameters for call to function osal_nv_init
   \   00005D   7A00         MOV       R2,#0x0
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
     80          
     81            // Initialize the MAC
     82            ZMacInit();
   \   000064                ; Setup parameters for call to function ZMacInit
   \   000064   12....       LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
     83          
     84            // Determine the extended address
     85            zmain_ext_addr();
   \   000067                ; Setup parameters for call to function zmain_ext_addr
   \   000067   12....       LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
     86          
     87          #if defined ZCL_KEY_ESTABLISH
     88            // Initialize the Certicom certificate information.
     89            zmain_cert_init();
     90          #endif
     91          
     92            // Initialize basic NV items
     93            zgInit();
   \   00006A                ; Setup parameters for call to function zgInit
   \   00006A   12....       LCALL     `??zgInit::?relay`; Banked call to: zgInit
     94          
     95          #ifndef NONWK
     96            // Since the AF isn't a task, call it's initialization routine
     97            afInit();
     98          #endif
     99          
    100            // Initialize the operating system
    101            osal_init_system();
   \   00006D                ; Setup parameters for call to function osal_init_system
   \   00006D   12....       LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
    102          
    103            // Allow interrupts
    104            osal_int_enable(INTS_ALL);
   \   000070                ; Setup parameters for call to function osal_int_enable
   \   000070   79FF         MOV       R1,#-0x1
   \   000072   12....       LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    105          
    106            // Final board initialization
    107            InitBoard(OB_READY);
   \   000075                ; Setup parameters for call to function InitBoard
   \   000075   7902         MOV       R1,#0x2
   \   000077   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    108          
    109            KEUS_init(0x00);
   \   00007A                ; Setup parameters for call to function KEUS_init
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   12....       LCALL     `??KEUS_init::?relay`; Banked call to: KEUS_init
    110          
    111            //KEUS_loop();
    112          
    113            // Display information about this device
    114            zmain_dev_info();
    115          
    116          #ifdef WDT_IN_PM1
    117            /* If WDT is used, this is a good place to enable it. */
    118            WatchDogEnable(WDTIMX);
    119          #endif
    120          
    121            osal_start_system(); // No Return from here
   \   00007F                ; Setup parameters for call to function osal_start_system
   \   00007F   12....       LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
    122          
    123            return 0; // Shouldn't get here.
   \   000082   7A00         MOV       R2,#0x0
   \   000084   7B00         MOV       R3,#0x0
   \   000086   02....       LJMP      ?BRET
   \   000089                REQUIRE SLEEPCMD
   \   000089                REQUIRE SLEEPSTA
   \   000089                REQUIRE CLKCONCMD
   \   000089                REQUIRE CLKCONSTA
   \   000089                REQUIRE _A_P1
   \   000089                REQUIRE P1DIR
   \   000089                REQUIRE _A_P0
   \   000089                REQUIRE P0DIR
   \   000089                REQUIRE P0INP
    124          } // main()
    125          
    126          /*********************************************************************
    127           * @fn      zmain_vdd_check
    128           * @brief   Check if the Vdd is OK to run the processor.
    129           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    130           *********************************************************************/
    131          static void zmain_vdd_check(void)
    132          {
    133            uint8 cnt = 16;
    134            
    135            do
    136            {
    137              while (!HalAdcCheckVdd(VDD_MIN_RUN))
    138                ;
    139            } while (--cnt);
    140          }
    141          
    142          /**************************************************************************************************
    143           * @fn          zmain_ext_addr
    144           *
    145           * @brief       Execute a prioritized search for a valid extended address and write the results
    146           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    147           *
    148           * input parameters
    149           *
    150           * None.
    151           *
    152           * output parameters
    153           *
    154           * None.
    155           *
    156           * @return      None.
    157           **************************************************************************************************
    158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    161            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    162            uint8 writeNV = TRUE;
    163          
    164            // First check whether a non-erased extended address exists in the OSAL NV.
    165            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL)) ||
    166                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    167                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000019   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V4,R0
   \   000024   89..         MOV       ?V5,R1
   \   000026   F5..         MOV       ?V6,A
   \   000028                ; Setup parameters for call to function osal_nv_item_init
   \   000028   F5..         MOV       ?V8,A
   \   00002A   F5..         MOV       ?V9,A
   \   00002C   78..         MOV       R0,#?V8
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C08         MOV       R4,#0x8
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A01         MOV       R2,#0x1
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7046         JNZ       ??zmain_ext_addr_0
   \   000044                ; Setup parameters for call to function osal_nv_read
   \   000044   75....       MOV       ?V8,#aExtendedAddress & 0xff
   \   000047   75....       MOV       ?V9,#(aExtendedAddress >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V8
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV       ?V8,#0x8
   \   000052   75..00       MOV       ?V9,#0x0
   \   000055   78..         MOV       R0,#?V8
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A01         MOV       R2,#0x1
   \   000060   7B00         MOV       R3,#0x0
   \   000062   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   701D         JNZ       ??zmain_ext_addr_0
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   7C08         MOV       R4,#0x8
   \   000074   7D00         MOV       R5,#0x0
   \   000076   A9..         MOV       R1,?V0
   \   000078   AA..         MOV       R2,?V1
   \   00007A   AB..         MOV       R3,?V2
   \   00007C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007F   7403         MOV       A,#0x3
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??zmain_ext_addr_1 & 0xFFFF
    168            {
    169              // Attempt to read the extended address from the location on the lock bits page
    170              // where the programming tools know to reserve it.
    171              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   00008A                ; Setup parameters for call to function HalFlashRead
   \   00008A   75..08       MOV       ?V8,#0x8
   \   00008D   78..         MOV       R0,#?V8
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000094   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000096   7AE8         MOV       R2,#-0x18
   \   000098   7B07         MOV       R3,#0x7
   \   00009A   797F         MOV       R1,#0x7f
   \   00009C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
    172          
    173              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A4                ; Setup parameters for call to function osal_memcmp
   \   0000A4   78..         MOV       R0,#?V4
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   A9..         MOV       R1,?V0
   \   0000AF   AA..         MOV       R2,?V1
   \   0000B1   AB..         MOV       R3,?V2
   \   0000B3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   6071         JZ        ??zmain_ext_addr_2
    174              {
    175                // Attempt to read the extended address from the designated location in the Info Page.
    176                if (!osal_memcmp((uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000BE                ; Setup parameters for call to function osal_memcmp
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C3   7C08         MOV       R4,#0x8
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   790C         MOV       R1,#0xc
   \   0000C9   7A78         MOV       R2,#0x78
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV       A,R1
   \   0000D6   701D         JNZ       ??zmain_ext_addr_3
    177                {
    178                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   75..0C       MOV       ?V0,#0xc
   \   0000DB   75..78       MOV       ?V1,#0x78
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   7C08         MOV       R4,#0x8
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   0000E9   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   0000EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F3   803A         SJMP      ??zmain_ext_addr_2
    179                }
    180                else // No valid extended address was found.
    181                {
    182                  uint8 idx;
    183          
    184          #if !defined(NV_RESTORE)
    185                  writeNV = FALSE; // Make this a temporary IEEE address
    186          #endif
    187          
    188                  /* Attempt to create a sufficiently random extended address for expediency.
    189                   * Note: this is only valid/legal in a test environment and
    190                   *       must never be used for a commercial product.
    191                   */
    192                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   0000F5   7E00         MOV       R6,#0x0
    193                  {
    194                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   0000F7                ; Setup parameters for call to function osal_rand
   \   0000F7   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000FA   8A..         MOV       ?V0,R2
    195                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   74..         MOV       A,#aExtendedAddress & 0xff
   \   000100   2A           ADD       A,R2
   \   000101   F582         MOV       DPL,A
   \   000103   E4           CLR       A
   \   000104   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000106   F583         MOV       DPH,A
   \   000108   E5..         MOV       A,?V0
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   0E           INC       R6
    196                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   00010C   EE           MOV       A,R6
   \   00010D   F8           MOV       R0,A
   \   00010E   12....       LCALL     ?Subroutine0 & 0xFFFF
    197                  }
   \                     ??CrossCallReturnLabel_0:
   \   000111   EB           MOV       A,R3
   \   000112   F0           MOVX      @DPTR,A
   \   000113   0E           INC       R6
   \   000114   EE           MOV       A,R6
   \   000115   C3           CLR       C
   \   000116   9406         SUBB      A,#0x6
   \   000118   40DD         JC        ??zmain_ext_addr_4
    198                  // Next-to-MSB identifies ZigBee devicetype.
    199          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    200                  aExtendedAddress[idx++] = 0x10;
    201          #elif ZG_BUILD_RTRONLY_TYPE
    202                  aExtendedAddress[idx++] = 0x20;
    203          #else
    204                  aExtendedAddress[idx++] = 0x30;
   \   00011A   08           INC       R0
   \   00011B   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00011E   7430         MOV       A,#0x30
   \   000120   F0           MOVX      @DPTR,A
    205          #endif
    206                  // MSB has historical signficance.
    207                  aExtendedAddress[idx] = 0xF8;
   \   000121   08           INC       R0
   \   000122   74..         MOV       A,#aExtendedAddress & 0xff
   \   000124   28           ADD       A,R0
   \   000125   F582         MOV       DPL,A
   \   000127   E4           CLR       A
   \   000128   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   00012A   F583         MOV       DPH,A
   \   00012C   74F8         MOV       A,#-0x8
   \   00012E   F0           MOVX      @DPTR,A
    208                }
    209              }
    210          
    211              if (writeNV)
    212              {
    213                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00012F                ; Setup parameters for call to function osal_nv_write
   \   00012F   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000132   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000135   78..         MOV       R0,#?V0
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   75..08       MOV       ?V0,#0x8
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140   78..         MOV       R0,#?V0
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   7C00         MOV       R4,#0x0
   \   000147   7D00         MOV       R5,#0x0
   \   000149   7A01         MOV       R2,#0x1
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000150   7404         MOV       A,#0x4
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
    214              }
    215            }
    216          
    217            // Set the MAC PIB extended address according to results from above.
    218            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000155                ; Setup parameters for call to function ZMacSetReq
   \   000155   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000157   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000159   79E2         MOV       R1,#-0x1e
   \   00015B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    219          }
   \   00015E   7408         MOV       A,#0x8
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   7F0A         MOV       R7,#0xa
   \   000165   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV       A,#aExtendedAddress & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    220          
    221          #if defined ZCL_KEY_ESTABLISH
    222          /**************************************************************************************************
    223           * @fn          zmain_cert_init
    224           *
    225           * @brief       Initialize the Certicom certificate information.
    226           *
    227           * input parameters
    228           *
    229           * None.
    230           *
    231           * output parameters
    232           *
    233           * None.
    234           *
    235           * @return      None.
    236           **************************************************************************************************
    237           */
    238          static void zmain_cert_init(void)
    239          {
    240            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    241            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    242                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    243                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    244                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    245                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    246                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    247                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    248          
    249            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    250            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    251          
    252            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    253            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    254            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL)) ||
    255                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData)) ||
    256                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    257            {
    258              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    259              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    260                           ZCL_KE_CA_PUBLIC_KEY_LEN);
    261              // If the certificate data is not NULL, use it to update the corresponding NV items.
    262              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    263              {
    264                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    265                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    266                             ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    267                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    268                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    269                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    270                             ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    271                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    272              }
    273            }
    274          }
    275          #endif
    276          
    277          /**************************************************************************************************
    278           * @fn          zmain_dev_info
    279           *
    280           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    281           *
    282           * input parameters
    283           *
    284           * None.
    285           *
    286           * output parameters
    287           *
    288           * None.
    289           *
    290           * @return      None.
    291           **************************************************************************************************
    292           */
    293          static void zmain_dev_info(void)
    294          {
    295          
    296          #if defined(SERIAL_DEBUG_SUPPORTED) || (defined(LEGACY_LCD_DEBUG) && defined(LCD_SUPPORTED))
    297            uint8 i;
    298            uint8 *xad;
    299            uint8 lcd_buf[Z_EXTADDR_LEN * 2 + 1];
    300          
    301            // Display the extended address.
    302            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    303          
    304            for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
    305            {
    306              uint8 ch;
    307              ch = (*xad >> 4) & 0x0F;
    308              lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
    309              ch = *xad & 0x0F;
    310              lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
    311            }
    312            lcd_buf[Z_EXTADDR_LEN * 2] = '\0';
    313            HalLcdWriteString("IEEE: ", HAL_LCD_DEBUG_LINE_1);
    314            HalLcdWriteString((char *)lcd_buf, HAL_LCD_DEBUG_LINE_2);
    315          #endif
    316          }
    317          
    318          #ifdef LCD_SUPPORTED
    319          /*********************************************************************
    320           * @fn      zmain_lcd_init
    321           * @brief   Initialize LCD at start up.
    322           * @return  none
    323           *********************************************************************/
    324          static void zmain_lcd_init(void)
    325          {
    326          #ifdef SERIAL_DEBUG_SUPPORTED
    327            {
    328              HalLcdWriteString("TexasInstruments", HAL_LCD_DEBUG_LINE_1);
    329          
    330          #if defined(MT_MAC_FUNC)
    331          #if defined(ZDO_COORDINATOR)
    332              HalLcdWriteString("MAC-MT Coord", HAL_LCD_DEBUG_LINE_2);
    333          #else
    334              HalLcdWriteString("MAC-MT Device", HAL_LCD_DEBUG_LINE_2);
    335          #endif // ZDO
    336          #elif defined(MT_NWK_FUNC)
    337          #if defined(ZDO_COORDINATOR)
    338              HalLcdWriteString("NWK Coordinator", HAL_LCD_DEBUG_LINE_2);
    339          #else
    340              HalLcdWriteString("NWK Device", HAL_LCD_DEBUG_LINE_2);
    341          #endif // ZDO
    342          #endif // MT_FUNC
    343            }
    344          #endif // SERIAL_DEBUG_SUPPORTED
    345          }
    346          #endif
    347          
    348          /*********************************************************************
    349          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> KEUS_init
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_ext_addr
      1     30   zmain_ext_addr
        0     28   -> HalFlashRead
        0     26   -> ZMacSetReq
        0     29   -> osal_memcmp
        0     29   -> osal_memcpy
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_read
        0     30   -> osal_nv_write
        0     26   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0DIR
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P0
       1  _A_P1
     137  main
     360  zmain_ext_addr
      12  -- Other

 
 508 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
  12 bytes of CODE     memory
   8 bytes of CONST    memory
   0 bytes of DATA     memory (+ 9 bytes shared)
 508 bytes of HUGECODE memory

Errors: none
Warnings: none
