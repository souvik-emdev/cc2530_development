///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              08/Jan/2020  12:34:02
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.c
//    Command line       =  
//        -f C:\Users\Souvik\AppData\Local\Temp\EW4FFF.tmp
//        ("D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -D HAL_UART=TRUE
//        -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D
//        HAL_UART_DMA_TX_MAX=64 -D INT_HEAP_LEN=3172 -lC "D:\VB_Shared\Zigbee
//        Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\VB_Shared\Zigbee
//        Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\" -I
//        "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\Source\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\Source\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\keus\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List\keusactions.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME keusactions

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_IOR_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??blinkLED::?relay`
        FUNCTION `??blinkLED::?relay`,0203H
        PUBLIC `??blinkerTimerCbk::?relay`
        FUNCTION `??blinkerTimerCbk::?relay`,0203H
        PUBLIC `??buttonPressAction::?relay`
        FUNCTION `??buttonPressAction::?relay`,0203H
        PUBLIC `??debugSequenceTimerCbk::?relay`
        FUNCTION `??debugSequenceTimerCbk::?relay`,0203H
        PUBLIC `??enterDebugMode::?relay`
        FUNCTION `??enterDebugMode::?relay`,0203H
        PUBLIC `??exitDebugMode::?relay`
        FUNCTION `??exitDebugMode::?relay`,0203H
        PUBLIC `??keusLEDInit::?relay`
        FUNCTION `??keusLEDInit::?relay`,0203H
        PUBLIC `??mapSwitch::?relay`
        FUNCTION `??mapSwitch::?relay`,0203H
        PUBLIC `??parseUart::?relay`
        FUNCTION `??parseUart::?relay`,0203H
        PUBLIC `??taskHandler::?relay`
        FUNCTION `??taskHandler::?relay`,0203H
        PUBWEAK __Constant_100
        PUBWEAK __Constant_20
        PUBWEAK __Constant_40
        PUBWEAK __Constant_80
        PUBLIC blinkLED
        FUNCTION blinkLED,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC blinkerTimerCbk
        FUNCTION blinkerTimerCbk,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC buttonPressAction
        FUNCTION buttonPressAction,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC buttonPressOrder
        PUBLIC commandId
        PUBLIC debugModeActive
        PUBLIC debugSequence
        PUBLIC debugSequenceTimer
        PUBLIC debugSequenceTimerCbk
        FUNCTION debugSequenceTimerCbk,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC enterDebugMode
        FUNCTION enterDebugMode,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC exitDebugMode
        FUNCTION exitDebugMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC keusLEDInit
        FUNCTION keusLEDInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ledBlinker
        PUBLIC ledPin
        PUBLIC ledPin2
        PUBLIC mapSwitch
        FUNCTION mapSwitch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC parseUart
        FUNCTION parseUart,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC scene_arr
        PUBLIC taskHandler
        FUNCTION taskHandler,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC uartDataBuffer
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
KeusGPIOSetDirection SYMBOL "KeusGPIOSetDirection"
`??KeusGPIOSetDirection::?relay` SYMBOL "?relay", KeusGPIOSetDirection
KeusGPIOSetPinValue SYMBOL "KeusGPIOSetPinValue"
`??KeusGPIOSetPinValue::?relay` SYMBOL "?relay", KeusGPIOSetPinValue
KeusTimerUtilAddTimer SYMBOL "KeusTimerUtilAddTimer"
`??KeusTimerUtilAddTimer::?relay` SYMBOL "?relay", KeusTimerUtilAddTimer
KeusTimerUtilRemoveTimer SYMBOL "KeusTimerUtilRemoveTimer"
`??KeusTimerUtilRemoveTimer::?relay` SYMBOL "?relay", KeusTimerUtilRemoveTimer
UART_tx             SYMBOL "UART_tx"
`??UART_tx::?relay` SYMBOL "?relay", UART_tx
blinkLED            SYMBOL "blinkLED"
`??blinkLED::?relay` SYMBOL "?relay", blinkLED
blinkerTimerCbk     SYMBOL "blinkerTimerCbk"
`??blinkerTimerCbk::?relay` SYMBOL "?relay", blinkerTimerCbk
buttonPressAction   SYMBOL "buttonPressAction"
`??buttonPressAction::?relay` SYMBOL "?relay", buttonPressAction
debugSequenceTimerCbk SYMBOL "debugSequenceTimerCbk"
`??debugSequenceTimerCbk::?relay` SYMBOL "?relay", debugSequenceTimerCbk
enterDebugMode      SYMBOL "enterDebugMode"
`??enterDebugMode::?relay` SYMBOL "?relay", enterDebugMode
exitDebugMode       SYMBOL "exitDebugMode"
`??exitDebugMode::?relay` SYMBOL "?relay", exitDebugMode
keusLEDInit         SYMBOL "keusLEDInit"
`??keusLEDInit::?relay` SYMBOL "?relay", keusLEDInit
mapSwitch           SYMBOL "mapSwitch"
`??mapSwitch::?relay` SYMBOL "?relay", mapSwitch
parseUart           SYMBOL "parseUart"
`??parseUart::?relay` SYMBOL "?relay", parseUart
taskHandler         SYMBOL "taskHandler"
`??taskHandler::?relay` SYMBOL "?relay", taskHandler

        EXTERN `??KeusGPIOSetDirection::?relay`
        FUNCTION `??KeusGPIOSetDirection::?relay`,00H
        EXTERN `??KeusGPIOSetPinValue::?relay`
        FUNCTION `??KeusGPIOSetPinValue::?relay`,00H
        EXTERN `??KeusTimerUtilAddTimer::?relay`
        FUNCTION `??KeusTimerUtilAddTimer::?relay`,00H
        EXTERN `??KeusTimerUtilRemoveTimer::?relay`
        FUNCTION `??KeusTimerUtilRemoveTimer::?relay`,00H
        EXTERN `??UART_tx::?relay`
        FUNCTION `??UART_tx::?relay`,00H
        EXTERN KeusGPIOSetDirection
        FUNCTION KeusGPIOSetDirection,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusGPIOSetPinValue
        FUNCTION KeusGPIOSetPinValue,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilAddTimer
        FUNCTION KeusTimerUtilAddTimer,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilRemoveTimer
        FUNCTION KeusTimerUtilRemoveTimer,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_tx
        FUNCTION UART_tx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN g0_u8RecData
        EXTERN keusAppEvents

// D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\Theme_switch\keusactions.c
//    1 #include "hal_adc.h"
//    2 #include "hal_flash.h"
//    3 #include "hal_lcd.h"
//    4 #include "hal_led.h"
//    5 #include "hal_uart.h"
//    6 #include "hal_drivers.h"
//    7 #include "OnBoard.h"
//    8 #include "OSAL.h"
//    9 #include "OSAL_Nv.h"
//   10 #include "ZComDef.h"
//   11 #include "ZMAC.h"
//   12 #include "keus_gpio_util.h"
//   13 #include "keus_timer_util.h"
//   14 #include "keusactions.h"

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// uint8 commandId
commandId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// uint8 uartDataBuffer[12]
uartDataBuffer:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// KeusGPIOPin ledPin
ledPin:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
// KeusGPIOPin ledPin2
ledPin2:
        DATA8
        DS 5
        REQUIRE `?<Initializer for ledPin2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
// uint8 scene_arr[4]
scene_arr:
        DATA32
        DS 4
        REQUIRE `?<Initializer for scene_arr>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// bool debugModeActive
debugModeActive:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// uint8 debugSequence
debugSequence:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
// uint8 volatile buttonPressOrder[4]
buttonPressOrder:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// KeusTimerConfig ledBlinker
ledBlinker:
        DATA8
        DS 8
        REQUIRE `?<Initializer for ledBlinker>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
// KeusTimerConfig debugSequenceTimer
debugSequenceTimer:
        DATA8
        DS 8
        REQUIRE `?<Initializer for debugSequenceTimer>`
        REQUIRE __INIT_XDATA_I
//   15 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   16 void debugSequenceTimerCbk(uint8 timerId)
debugSequenceTimerCbk:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function debugSequenceTimerCbk
        CODE
//   17 {
        FUNCALL debugSequenceTimerCbk, KeusTimerUtilRemoveTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   18     debugSequence = 0;
        MOV       DPTR,#debugSequence
        CLR       A
        MOVX      @DPTR,A
//   19     KeusTimerUtilRemoveTimer(&debugSequenceTimer);
        ; Setup parameters for call to function KeusTimerUtilRemoveTimer
        MOV       R2,#debugSequenceTimer & 0xff
        MOV       R3,#(debugSequenceTimer >> 8) & 0xff
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//   20 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL     `??KeusTimerUtilRemoveTimer::?relay`; Banked call to: KeusTimerUtilRemoveTimer
        LJMP      ??Subroutine5_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//   21 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   22 void enterDebugMode(void)
enterDebugMode:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function enterDebugMode
        CODE
//   23 {
        FUNCALL enterDebugMode, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL enterDebugMode, UART_tx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//   24     debugModeActive = 1;
        MOV       DPTR,#debugModeActive
        MOV       A,#0x1
        MOVX      @DPTR,A
//   25     ledPin.state = LED_ON;
        MOV       DPTR,#ledPin + 4
        CLR       A
        MOVX      @DPTR,A
//   26     KeusGPIOSetPinValue(&ledPin);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin & 0xff
        MOV       R3,#(ledPin >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//   27     uint8 sendReply[2] = {DEBUG_INFORMATION, DEBUG_TURNED_ON};
        MOV       DPTR,#`?<Constant {2, 1}>`
        SJMP      ?Subroutine0
//   28     UART_tx(sendReply, 2);
//   29 }
          CFI EndBlock cfiBlock2
//   30 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   31 void exitDebugMode(void)
exitDebugMode:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function exitDebugMode
        CODE
//   32 {
        FUNCALL exitDebugMode, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exitDebugMode, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exitDebugMode, UART_tx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//   33     debugModeActive = 0;
        MOV       DPTR,#debugModeActive
        CLR       A
        MOVX      @DPTR,A
//   34     ledPin.state = LED_OFF;
        MOV       DPTR,#ledPin + 4
        INC       A
        MOVX      @DPTR,A
//   35     ledPin2.state = LED_OFF;
        MOV       DPTR,#ledPin2 + 4
        MOVX      @DPTR,A
//   36     KeusGPIOSetPinValue(&ledPin);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        LCALL     ?Subroutine4 & 0xFFFF
//   37     KeusGPIOSetPinValue(&ledPin2);
//   38     uint8 sendReply[2] = {DEBUG_INFORMATION, DEBUG_TURNED_OFF};
??CrossCallReturnLabel_5:
        MOV       DPTR,#`?<Constant {2, 2}>`
        SJMP      ?Subroutine0
//   39     UART_tx(sendReply, 2);
//   40 }
          CFI EndBlock cfiBlock3
//   41 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   42 void blinkerTimerCbk(uint8 timerId)
blinkerTimerCbk:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function blinkerTimerCbk
        CODE
//   43 {
        FUNCALL blinkerTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL blinkerTimerCbk, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL blinkerTimerCbk, KeusTimerUtilRemoveTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   44     if (!debugModeActive)
        MOV       DPTR,#debugModeActive
        MOVX      A,@DPTR
        JNZ       ??blinkerTimerCbk_0
//   45     {
//   46         ledPin.state = LED_OFF;
        MOV       DPTR,#ledPin + 4
        MOV       A,#0x1
        MOVX      @DPTR,A
//   47         KeusGPIOSetPinValue(&ledPin);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin & 0xff
        MOV       R3,#(ledPin >> 8) & 0xff
        SJMP      ??blinkerTimerCbk_1
//   48     }
//   49     else
//   50     {
//   51         ledPin2.state = LED_OFF;
??blinkerTimerCbk_0:
        MOV       DPTR,#ledPin2 + 4
        MOV       A,#0x1
        MOVX      @DPTR,A
//   52         KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
??blinkerTimerCbk_1:
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//   53     }
//   54     KeusTimerUtilRemoveTimer(&ledBlinker);
        ; Setup parameters for call to function KeusTimerUtilRemoveTimer
        MOV       R2,#ledBlinker & 0xff
        MOV       R3,#(ledBlinker >> 8) & 0xff
        SJMP      ?Subroutine1
//   55 }
          CFI EndBlock cfiBlock4
//   56 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   57 void blinkLED(void)
blinkLED:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function blinkLED
        CODE
//   58 {
        FUNCALL blinkLED, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL blinkLED, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL blinkLED, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   59     if (!debugModeActive)
        MOV       DPTR,#debugModeActive
        MOVX      A,@DPTR
        JNZ       ??blinkLED_0
//   60     {
//   61         ledPin.state = LED_ON;
        MOV       DPTR,#ledPin + 4
        CLR       A
        MOVX      @DPTR,A
//   62         KeusGPIOSetPinValue(&ledPin);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin & 0xff
        MOV       R3,#(ledPin >> 8) & 0xff
        SJMP      ??blinkLED_1
//   63     }
//   64     else
//   65     {
//   66         ledPin2.state = LED_ON;
??blinkLED_0:
        MOV       DPTR,#ledPin2 + 4
        CLR       A
        MOVX      @DPTR,A
//   67         KeusGPIOSetPinValue(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
??blinkLED_1:
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
//   68     }
//   69     KeusTimerUtilAddTimer(&ledBlinker);
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#ledBlinker & 0xff
        MOV       R3,#(ledBlinker >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
//   70 }
        SJMP      ??Subroutine5_0
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function UART_tx
        ; Setup parameters for call to function UART_tx
        MOV       R1,#0x2
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??UART_tx::?relay`; Banked call to: UART_tx
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock6
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
//   71 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   72 void keusLEDInit(void)
keusLEDInit:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function keusLEDInit
        CODE
//   73 {
        FUNCALL keusLEDInit, KeusGPIOSetDirection
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL keusLEDInit, KeusGPIOSetDirection
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL keusLEDInit, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL keusLEDInit, KeusGPIOSetPinValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   74     KeusGPIOSetDirection(&ledPin);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin & 0xff
        MOV       R3,#(ledPin >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//   75     KeusGPIOSetDirection(&ledPin2);
        ; Setup parameters for call to function KeusGPIOSetDirection
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetDirection::?relay`; Banked call to: KeusGPIOSetDirection
//   76     KeusGPIOSetPinValue(&ledPin);
        ; Setup parameters for call to function KeusGPIOSetPinValue
        LCALL     ?Subroutine4 & 0xFFFF
//   77     KeusGPIOSetPinValue(&ledPin2);
//   78 }
??CrossCallReturnLabel_6:
        SJMP      ??Subroutine5_0
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function exitDebugMode
          CFI Conditional ??CrossCallReturnLabel_5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function keusLEDInit
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-7
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV       R2,#ledPin & 0xff
        MOV       R3,#(ledPin >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
        ; Setup parameters for call to function KeusGPIOSetPinValue
        ; Setup parameters for call to function KeusGPIOSetPinValue
        MOV       R2,#ledPin2 & 0xff
        MOV       R3,#(ledPin2 >> 8) & 0xff
        LCALL     `??KeusGPIOSetPinValue::?relay`; Banked call to: KeusGPIOSetPinValue
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//   79 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   80 void parseUart(void)
parseUart:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function parseUart
        CODE
//   81 {
        FUNCALL parseUart, taskHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   82     int i = 0;
        MOV       R0,#0x0
        MOV       R1,#0x0
//   83     commandId = g0_u8RecData[0];
        MOV       DPTR,#g0_u8RecData
        MOVX      A,@DPTR
        MOV       DPTR,#commandId
        MOVX      @DPTR,A
//   84 
//   85     for (i = 0; i < MAX_UART_DATA_BUFFER; i++)
//   86     {
//   87         uartDataBuffer[i] = g0_u8RecData[i + 1];
??parseUart_0:
        MOV       A,#(g0_u8RecData + 1) & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#((g0_u8RecData + 1) >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       A,#uartDataBuffer & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(uartDataBuffer >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
//   88     }
        INC       R0
        MOV       A,R0
        JNZ       ??parseUart_1
        INC       R1
??parseUart_1:
        CLR       C
        SUBB      A,#0xc
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??parseUart_0
//   89 
//   90     taskHandler();
        ; Setup parameters for call to function taskHandler
        LCALL     `??taskHandler::?relay`; Banked call to: taskHandler
//   91 }
        SJMP      ??Subroutine5_0
          CFI EndBlock cfiBlock12
//   92 
//   93 //Calls the required function as needed by UART received message

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   94 void taskHandler(void)
taskHandler:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function taskHandler
        CODE
//   95 {
        FUNCALL taskHandler, mapSwitch
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskHandler, enterDebugMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskHandler, exitDebugMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   96     switch (commandId)
        MOV       DPTR,#commandId
        MOVX      A,@DPTR
        DEC       A
        JZ        ??taskHandler_0
        DEC       A
        JZ        ??taskHandler_1
        DEC       A
        JZ        ??taskHandler_2
        SJMP      ??taskHandler_3
//   97     {
//   98     case TASK_MAP_SWITCH:
//   99         mapSwitch();
??taskHandler_0:
        ; Setup parameters for call to function mapSwitch
        LCALL     `??mapSwitch::?relay`; Banked call to: mapSwitch
//  100         break;
        SJMP      ??taskHandler_3
//  101     case TASK_ENTER_DEBUG:
//  102         enterDebugMode();
??taskHandler_1:
        ; Setup parameters for call to function enterDebugMode
        LCALL     `??enterDebugMode::?relay`; Banked call to: enterDebugMode
//  103         break;
        SJMP      ??taskHandler_3
//  104     case TASK_EXIT_DEBUG:
//  105         exitDebugMode();
??taskHandler_2:
        ; Setup parameters for call to function exitDebugMode
        LCALL     `??exitDebugMode::?relay`; Banked call to: exitDebugMode
//  106         break;
//  107 
//  108     default:
//  109         break;
//  110     }
//  111 }
??taskHandler_3:
        LJMP      ??Subroutine5_0 & 0xFFFF
          CFI EndBlock cfiBlock13
//  112 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  113 void mapSwitch(void)
mapSwitch:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function mapSwitch
        CODE
//  114 {
        FUNCALL mapSwitch, UART_tx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  115     //Example msg: 28 06 01 | 02 01 54 02 64 | 29
//  116     int noOfSwitch = uartDataBuffer[0];
        MOV       DPTR,#uartDataBuffer
        MOVX      A,@DPTR
        MOV       R6,A
//  117     uint8 position = 0, switchId, sceneID;
        MOV       R2,#0x0
//  118 
//  119     for (int i = 0; i < noOfSwitch; i++)
        MOV       R4,#0x0
        MOV       R5,#0x0
        SJMP      ??mapSwitch_0
//  120     {
//  121         switchId = uartDataBuffer[position + 1];
//  122         sceneID = uartDataBuffer[position + 2];
//  123         position += 2;
//  124         switch (switchId)
//  125         {
//  126         case BUTTON1_ID:
//  127             scene_arr[0] = sceneID;
//  128             break;
//  129         case BUTTON2_ID:
//  130             scene_arr[1] = sceneID;
//  131             break;
//  132         case BUTTON3_ID:
//  133             scene_arr[2] = sceneID;
//  134             break;
//  135         case BUTTON4_ID:
//  136             scene_arr[3] = sceneID;
??mapSwitch_1:
        MOV       A,R0
        MOV       DPTR,#scene_arr + 3
??mapSwitch_2:
        MOVX      @DPTR,A
//  137             break;
??mapSwitch_3:
        INC       R4
        MOV       A,R4
        JNZ       ??mapSwitch_0
        INC       R5
??mapSwitch_0:
        CLR       C
        MOV       A,R4
        SUBB      A,R6
        MOV       A,R5
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??mapSwitch_4
        MOV       A,R2
        MOV       R0,A
        MOV       A,#uartDataBuffer & 0xff
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,#(uartDataBuffer >> 8) & 0xff
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       R2
        INC       R2
        MOV       A,R3
        DEC       A
        JZ        ??mapSwitch_5
        DEC       A
        JZ        ??mapSwitch_6
        DEC       A
        JZ        ??mapSwitch_7
        DEC       A
        JZ        ??mapSwitch_1
        SJMP      ??mapSwitch_3
??mapSwitch_5:
        MOV       A,R0
        MOV       DPTR,#scene_arr
        SJMP      ??mapSwitch_2
??mapSwitch_6:
        MOV       A,R0
        MOV       DPTR,#scene_arr + 1
        SJMP      ??mapSwitch_2
??mapSwitch_7:
        MOV       A,R0
        MOV       DPTR,#scene_arr + 2
        SJMP      ??mapSwitch_2
//  138 
//  139         default:
//  140             break;
//  141         }
//  142     }
//  143     uint8 sendReply[1] = {KEUS_UART_MSG_ACK};
??mapSwitch_4:
        MOV       DPTR,#`?<Constant {5}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x1
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  144     UART_tx(sendReply, 1);
        ; Setup parameters for call to function UART_tx
        MOV       R1,#0x1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??UART_tx::?relay`; Banked call to: UART_tx
//  145     //KeusUartAckMsg(KEUS_UART_MSG_ACK);
//  146 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
//  147 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  148 void buttonPressAction(uint8 buttonId)
buttonPressAction:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function buttonPressAction
        CODE
//  149 {
        FUNCALL buttonPressAction, KeusTimerUtilRemoveTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, UART_tx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, enterDebugMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, UART_tx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, KeusTimerUtilRemoveTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, UART_tx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, KeusTimerUtilRemoveTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, KeusTimerUtilAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, UART_tx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buttonPressAction, blinkLED
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  150     uint8 sendReply[2] = {EXECUTE_SCENE_COMMAND, 0};
        MOV       DPTR,#`?<Constant {1, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  151     if (debugModeActive)
        MOV       DPTR,#debugModeActive
        MOVX      A,@DPTR
        JZ        ??buttonPressAction_0
//  152     {
//  153         switch (buttonId)
        MOV       A,R1
        DEC       A
        JZ        ??buttonPressAction_1
        DEC       A
        JZ        ??buttonPressAction_2
        DEC       A
        JZ        ??buttonPressAction_3
        DEC       A
        JZ        ??buttonPressAction_4
        LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
//  154         {
//  155         case BUTTON1_ID:
//  156             keusAppEvents |= KEUS_APP_EVT1;
??buttonPressAction_1:
        MOV       DPTR,#__Constant_20
        SJMP      ??buttonPressAction_5
//  157             break;
//  158 
//  159         case BUTTON2_ID:
//  160             keusAppEvents |= KEUS_APP_EVT2;
??buttonPressAction_2:
        MOV       DPTR,#__Constant_40
        SJMP      ??buttonPressAction_5
//  161             break;
//  162 
//  163         case BUTTON3_ID:
//  164             keusAppEvents |= KEUS_APP_EVT3;
??buttonPressAction_3:
        MOV       DPTR,#__Constant_80
        SJMP      ??buttonPressAction_5
//  165             break;
//  166 
//  167         case BUTTON4_ID:
//  168             keusAppEvents |= KEUS_APP_EVT4;
??buttonPressAction_4:
        MOV       DPTR,#__Constant_100
??buttonPressAction_5:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_IOR_TO_X
//  169             break;
        LJMP      ??CrossCallReturnLabel_4 & 0xFFFF
//  170         default:
//  171             break;
//  172         }
//  173     }
//  174     else
//  175     {
//  176         switch (buttonId)
??buttonPressAction_0:
        MOV       A,R1
        DEC       A
        JZ        ??buttonPressAction_6
        DEC       A
        JZ        ??buttonPressAction_7
        DEC       A
        JZ        ??buttonPressAction_8
        DEC       A
        JZ        ??buttonPressAction_9
        SJMP      ??CrossCallReturnLabel_4
//  177         {
//  178         case BUTTON1_ID:
//  179             if (debugSequence & KEUS_BUTTON4)
??buttonPressAction_6:
        MOV       DPTR,#debugSequence
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??buttonPressAction_10
//  180             {
//  181                 KeusTimerUtilRemoveTimer(&debugSequenceTimer);
        ; Setup parameters for call to function KeusTimerUtilRemoveTimer
        LCALL     ?Subroutine2 & 0xFFFF
//  182                 KeusTimerUtilAddTimer(&debugSequenceTimer);
//  183                 debugSequence |= KEUS_BUTTON1;
//  184             }
??CrossCallReturnLabel_0:
        SETB      0xE0 /* A   */.0
        SJMP      ??buttonPressAction_11
//  185             else
//  186             {
//  187                 sendReply[1] = scene_arr[0];
??buttonPressAction_10:
        MOV       DPTR,#scene_arr
        SJMP      ??buttonPressAction_12
//  188                 UART_tx(sendReply, 2);
//  189             }
//  190             break;
//  191 
//  192         case BUTTON2_ID:
//  193             if (debugSequence == 15)
??buttonPressAction_7:
        MOV       DPTR,#debugSequence
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??buttonPressAction_13
//  194             {
//  195                 enterDebugMode();
        ; Setup parameters for call to function enterDebugMode
        LCALL     `??enterDebugMode::?relay`; Banked call to: enterDebugMode
        SJMP      ??CrossCallReturnLabel_4
//  196             }
//  197             else
//  198             {
//  199                 sendReply[1] = scene_arr[1];
??buttonPressAction_13:
        MOV       DPTR,#scene_arr + 1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine3 & 0xFFFF
//  200                 UART_tx(sendReply, 2);
//  201                 KeusTimerUtilAddTimer(&debugSequenceTimer);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#debugSequenceTimer & 0xff
        MOV       R3,#(debugSequenceTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
//  202                 debugSequence |= KEUS_BUTTON2;
        MOV       DPTR,#debugSequence
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.1
        SJMP      ??buttonPressAction_11
//  203             }
//  204             break;
//  205 
//  206         case BUTTON3_ID:
//  207             if (debugSequence & KEUS_BUTTON2)
??buttonPressAction_8:
        MOV       DPTR,#debugSequence
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??buttonPressAction_14
//  208             {
//  209                 KeusTimerUtilRemoveTimer(&debugSequenceTimer);
        ; Setup parameters for call to function KeusTimerUtilRemoveTimer
        LCALL     ?Subroutine2 & 0xFFFF
//  210                 KeusTimerUtilAddTimer(&debugSequenceTimer);
//  211                 debugSequence |= KEUS_BUTTON3;
//  212             }
??CrossCallReturnLabel_1:
        SETB      0xE0 /* A   */.2
        SJMP      ??buttonPressAction_11
//  213             else
//  214             {
//  215                 sendReply[1] = scene_arr[2];
??buttonPressAction_14:
        MOV       DPTR,#scene_arr + 2
        SJMP      ??buttonPressAction_12
//  216                 UART_tx(sendReply, 2);
//  217             }
//  218             break;
//  219 
//  220         case BUTTON4_ID:
//  221             if (debugSequence & KEUS_BUTTON3)
??buttonPressAction_9:
        MOV       DPTR,#debugSequence
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??buttonPressAction_15
//  222             {
//  223                 KeusTimerUtilRemoveTimer(&debugSequenceTimer);
        ; Setup parameters for call to function KeusTimerUtilRemoveTimer
        LCALL     ?Subroutine2 & 0xFFFF
//  224                 KeusTimerUtilAddTimer(&debugSequenceTimer);
//  225                 debugSequence |= KEUS_BUTTON4;
//  226             }
??CrossCallReturnLabel_2:
        SETB      0xE0 /* A   */.3
??buttonPressAction_11:
        MOVX      @DPTR,A
        SJMP      ??CrossCallReturnLabel_4
//  227             else
//  228             {
//  229                 sendReply[1] = scene_arr[3];
??buttonPressAction_15:
        MOV       DPTR,#scene_arr + 3
??buttonPressAction_12:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
//  230                 UART_tx(sendReply, 2);
//  231             }
//  232             break;
//  233         default:
//  234             break;
//  235         }
//  236         // blinkLED();
//  237     }
        LCALL     ?Subroutine3 & 0xFFFF
//  238     blinkLED();
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function blinkLED
        LCALL     `??blinkLED::?relay`; Banked call to: blinkLED
//  239 }
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function buttonPressAction
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function buttonPressAction
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function UART_tx
        ; Setup parameters for call to function UART_tx
        MOV       R1,#0x2
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??UART_tx::?relay`; Banked call to: UART_tx
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function buttonPressAction
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function buttonPressAction
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function buttonPressAction
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV       R2,#debugSequenceTimer & 0xff
        MOV       R3,#(debugSequenceTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilRemoveTimer::?relay`; Banked call to: KeusTimerUtilRemoveTimer
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        ; Setup parameters for call to function KeusTimerUtilAddTimer
        MOV       R2,#debugSequenceTimer & 0xff
        MOV       R3,#(debugSequenceTimer >> 8) & 0xff
        LCALL     `??KeusTimerUtilAddTimer::?relay`; Banked call to: KeusTimerUtilAddTimer
        MOV       DPTR,#debugSequence
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin>`:
        DATA8
        DB 0
        DB 0
        DB 1
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledPin2>`:
        DATA8
        DB 0
        DB 1
        DB 1
        DB 0
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for scene_arr>`:
        DATA8
        DB 1
        DB 2
        DB 3
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ledBlinker>`:
        DATA16
        DW `??blinkerTimerCbk::?relay`
        DW 100
        DATA8
        DB 1
        DB -1
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for debugSequenceTimer>`:
        DATA16
        DW `??debugSequenceTimerCbk::?relay`
        DW 500
        DATA8
        DB 1
        DB -1
        DATA16
        DW 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??debugSequenceTimerCbk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    debugSequenceTimerCbk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??enterDebugMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    enterDebugMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??exitDebugMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    exitDebugMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??blinkerTimerCbk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    blinkerTimerCbk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??blinkLED::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    blinkLED

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??keusLEDInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    keusLEDInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??parseUart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    parseUart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??taskHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    taskHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??mapSwitch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    mapSwitch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??buttonPressAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    buttonPressAction

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {2, 1}>`:
        DATA8
        DB 2
        DB 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {2, 2}>`:
        DATA8
        DB 2
        DB 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {5}>`:
        DB 5

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {1, 0}>`:
        DATA8
        DB 1
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_20:
        DD 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40:
        DD 64

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_80:
        DD 128

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_100:
        DD 256

        END
// 
// 722 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//  30 bytes in segment XDATA_I
//  30 bytes in segment XDATA_ID
//  23 bytes in segment XDATA_ROM_C
//  19 bytes in segment XDATA_Z
// 
//  90 bytes of CODE     memory
//   7 bytes of CONST    memory (+ 16 bytes shared)
// 722 bytes of HUGECODE memory
//  49 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
