###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               07/Jan/2020  16:06:09
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f C:\Users\Souvik\AppData\Local\Temp\EW22AF.tmp ("D:\VB_Shared\Zigbee
#        Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\ZMain.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        HAL_KEY=FALSE -D HAL_LCD=FALSE -D HAL_LED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -D HAL_UART=TRUE
#        -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D
#        HAL_UART_DMA_TX_MAX=64 -D INT_HEAP_LEN=3172 -lC "D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\VB_Shared\Zigbee
#        Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\" -I
#        "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\Source\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\keus\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List\ZMain.lst
#    Object file        =  
#        D:\VB_Shared\Zigbee Resources\CC2530
#        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj\ZMain.r51
#
###############################################################################

D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2020-06-01 18:54:30 -0700 (Monday, 06 Jan 2020) $
      4          
      5            Description:    Mapping Scene to buttons
      6                            Blinking indication LEDs
      7                            Keus Theme Switch
      8          
      9            Notes:          This version targets the Chipcon CC2530
     10          
     11          
     12          
     13          **************************************************************************************************/
     14          
     15          /*********************************************************************
     16           * INCLUDES
     17           */
     18          
     19          #ifndef NONWK
     20          #include "AF.h"
     21          #endif
     22          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     23          #include "hal_flash.h"
     24          #include "hal_lcd.h"
     25          #include "hal_led.h"
     26          #include "hal_uart.h"
     27          #include "hal_drivers.h"
     28          #include "OnBoard.h"
     29          #include "OSAL.h"
     30          #include "OSAL_Nv.h"
     31          #include "ZComDef.h"
     32          #include "ZMAC.h"
     33          #include "keus_gpio_util.h"
     34          #include "keus_timer_util.h"
     35          
     36          /*********************************************************************
     37           * CUSTOM CODE
     38           */
     39          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          volatile uint32 keusAppEvents = 0;
   \                     keusAppEvents:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     41          
     42          //Event bit masks
     43          #define KEUS_BUTTON1 0x1
     44          #define KEUS_BUTTON2 0x2
     45          #define KEUS_BUTTON3 0x4
     46          #define KEUS_BUTTON4 0x8
     47          #define KEUS_UART 0x10
     48          #define KEUS_APP_EVT1 0X20
     49          #define KEUS_APP_EVT2 0X40
     50          #define KEUS_APP_EVT3 0X80
     51          #define KEUS_APP_EVT4 0X100
     52          
     53          #define BUTTON1_ID 1
     54          #define BUTTON2_ID 2
     55          #define BUTTON3_ID 3
     56          #define BUTTON4_ID 4
     57          
     58          extern void keusButtonInit(void);
     59          extern void exitDebugMode(void);
     60          
     61          #define SCN_ARR_NVIC_LOCATION 0x10
     62          
     63          extern void parseUart(void);
     64          extern void initUart(void);
     65          extern void keusLEDInit(void);
     66          void buttonPressAction(uint8 buttonId);
     67          
     68          //void KEUS_delayms(uint16 ms);
     69          void KEUS_init(void);
     70          void KEUS_loop(void); //the actual polling
     71          
     72          //does nvic operations and returns status of nvic operations
     73          // bool KeusThemeSwitchMiniMemoryInit(void);
     74          // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void);
     75          // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void);
     76          
     77          //status of nvic operations
     78          // uint8 initStatus = 0;
     79          // uint8 writeStatus = 0;
     80          // uint8 readStatus = 0;
     81          
     82          // void KEUS_delayms(uint16 ms)
     83          // {
     84          //   for (uint16 i = 0; i < ms; i++)
     85          //   {
     86          //     Onboard_wait(1000);
     87          //   }
     88          // }
     89          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     90          void KEUS_init()
   \                     KEUS_init:
     91          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     92            initUart();
   \   000005                ; Setup parameters for call to function initUart
   \   000005   12....       LCALL     `??initUart::?relay`; Banked call to: initUart
     93            keusButtonInit();
   \   000008                ; Setup parameters for call to function keusButtonInit
   \   000008   12....       LCALL     `??keusButtonInit::?relay`; Banked call to: keusButtonInit
     94            keusLEDInit();
   \   00000B                ; Setup parameters for call to function keusLEDInit
   \   00000B   12....       LCALL     `??keusLEDInit::?relay`; Banked call to: keusLEDInit
     95          
     96            KeusTimerUtilInit();
   \   00000E                ; Setup parameters for call to function KeusTimerUtilInit
   \   00000E   12....       LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
     97            KeusTimerUtilStartTimer();
   \   000011                ; Setup parameters for call to function KeusTimerUtilStartTimer
   \   000011   12....       LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
     98            //initStatus = KeusThemeSwitchMiniMemoryInit();
     99            //osal_nv_item_init(SCN_ARR_NVIC_LOCATION, sizeof(arr_scene), (void *)arr_scene);
    100            //readStatus = KeusThemeSwitchMiniReadConfigDataIntoMemory();
    101            //restoring scenes back to memory at startup
    102            //osal_nv_read(SCN_ARR_NVIC_LOCATION, 0, sizeof(arr_scene), (void *)arr_scene);
    103            HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
   \   000014                ; Setup parameters for call to function osal_strlen
   \   000014   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   000016   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   000018   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00001B   8A..         MOV       ?V0,R2
   \   00001D                ; Setup parameters for call to function HalUARTWrite
   \   00001D   AC..         MOV       R4,?V0
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   7A..         MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
   \   000023   7B..         MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
   \   000025   7900         MOV       R1,#0x0
   \   000027   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    104          }
   \   00002A   7F02         MOV       R7,#0x2
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
    105          
    106          // bool KeusThemeSwitchMiniMemoryInit(void)
    107          // {
    108          
    109          //   uint8 res = osal_nv_item_init(0x10, sizeof(arr_scene), (void *)arr_scene);
    110          
    111          //   if (res == SUCCESS || res == NV_ITEM_UNINIT)
    112          //   {
    113          //     return true;
    114          //   }
    115          //   else
    116          //   {
    117          //     return false;
    118          //   }
    119          // }
    120          
    121          // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
    122          // {
    123          //   uint8 res = osal_nv_write(0x10, 0, sizeof(arr_scene), (void *)arr_scene);
    124          
    125          //   if (res == SUCCESS)
    126          //   {
    127          //     return true;
    128          //   }
    129          //   else
    130          //   {
    131          //     return false;
    132          //   }
    133          // }
    134          
    135          // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
    136          // {
    137          //   uint8 res = osal_nv_read(0x10, 0, sizeof(arr_scene), (void *)arr_scene);
    138          
    139          //   if (res == SUCCESS)
    140          //   {
    141          //     return true;
    142          //   }
    143          //   else
    144          //   {
    145          //     return false;
    146          //   }
    147          // }
    148          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    149          void KEUS_loop()
   \                     KEUS_loop:
    150          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8013         SJMP      ??KEUS_loop_0
    151            while (1)
    152            {
    153              HalUARTPoll();
    154              //KEUS_delayms(1000);
    155          
    156              if (keusAppEvents & KEUS_UART)
    157              {
    158                parseUart();
   \                     ??KEUS_loop_1:
   \   000007                ; Setup parameters for call to function parseUart
   \   000007   12....       LCALL     `??parseUart::?relay`; Banked call to: parseUart
    159                keusAppEvents ^= KEUS_UART;
   \   00000A   90....       MOV       DPTR,#__Constant_10
   \                     ??KEUS_loop_2:
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   12....       LCALL     ?L_MOV_X
   \   000012   90....       MOV       DPTR,#keusAppEvents
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?L_XOR_TO_X
    160              }
   \                     ??KEUS_loop_0:
   \   00001A                ; Setup parameters for call to function HalUARTPoll
   \   00001A   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   00001D   90....       MOV       DPTR,#keusAppEvents
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?L_MOV_X
   \   000025   E5..         MOV       A,?V0
   \   000027   5410         ANL       A,#0x10
   \   000029   70DC         JNZ       ??KEUS_loop_1
    161              else if (keusAppEvents & KEUS_BUTTON1)
   \   00002B   90....       MOV       DPTR,#keusAppEvents
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?L_MOV_X
   \   000033   E5..         MOV       A,?V0
   \   000035   A2E0         MOV       C,0xE0 /* A   */.0
   \   000037   500A         JNC       ??KEUS_loop_3
    162              {
    163                buttonPressAction(BUTTON1_ID);
   \   000039                ; Setup parameters for call to function buttonPressAction
   \   000039   7901         MOV       R1,#0x1
   \   00003B   12....       LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
    164                keusAppEvents ^= KEUS_BUTTON1;
   \   00003E   90....       MOV       DPTR,#__Constant_1
   \   000041   80CA         SJMP      ??KEUS_loop_2
    165              }
    166              else if (keusAppEvents & KEUS_BUTTON2)
   \                     ??KEUS_loop_3:
   \   000043   90....       MOV       DPTR,#keusAppEvents
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?L_MOV_X
   \   00004B   E5..         MOV       A,?V0
   \   00004D   5402         ANL       A,#0x2
   \   00004F   600A         JZ        ??KEUS_loop_4
    167              {
    168                buttonPressAction(BUTTON2_ID);
   \   000051                ; Setup parameters for call to function buttonPressAction
   \   000051   7902         MOV       R1,#0x2
   \   000053   12....       LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
    169                keusAppEvents ^= KEUS_BUTTON2;
   \   000056   90....       MOV       DPTR,#__Constant_2
   \   000059   80B2         SJMP      ??KEUS_loop_2
    170              }
    171              else if (keusAppEvents & KEUS_BUTTON3)
   \                     ??KEUS_loop_4:
   \   00005B   90....       MOV       DPTR,#keusAppEvents
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?L_MOV_X
   \   000063   E5..         MOV       A,?V0
   \   000065   5404         ANL       A,#0x4
   \   000067   600A         JZ        ??KEUS_loop_5
    172              {
    173                buttonPressAction(BUTTON3_ID);
   \   000069                ; Setup parameters for call to function buttonPressAction
   \   000069   7903         MOV       R1,#0x3
   \   00006B   12....       LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
    174                keusAppEvents ^= KEUS_BUTTON3;
   \   00006E   90....       MOV       DPTR,#__Constant_4
   \   000071   809A         SJMP      ??KEUS_loop_2
    175              }
    176              else if (keusAppEvents & KEUS_BUTTON4)
   \                     ??KEUS_loop_5:
   \   000073   90....       MOV       DPTR,#keusAppEvents
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?L_MOV_X
   \   00007B   E5..         MOV       A,?V0
   \   00007D   5408         ANL       A,#0x8
   \   00007F   600A         JZ        ??KEUS_loop_6
    177              {
    178                buttonPressAction(BUTTON4_ID);
   \   000081                ; Setup parameters for call to function buttonPressAction
   \   000081   7904         MOV       R1,#0x4
   \   000083   12....       LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
    179                keusAppEvents ^= KEUS_BUTTON4;
   \   000086   90....       MOV       DPTR,#__Constant_8
   \   000089   8082         SJMP      ??KEUS_loop_2
    180              }
    181              else if (keusAppEvents & KEUS_APP_EVT1)
   \                     ??KEUS_loop_6:
   \   00008B   90....       MOV       DPTR,#keusAppEvents
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?L_MOV_X
   \   000093   E5..         MOV       A,?V0
   \   000095   5420         ANL       A,#0x20
   \   000097   6006         JZ        ??KEUS_loop_7
    182              {
    183                //action here
    184                keusAppEvents ^= KEUS_APP_EVT1;
   \   000099   90....       MOV       DPTR,#__Constant_20
   \   00009C   02....       LJMP      ??KEUS_loop_2 & 0xFFFF
    185              }
    186              else if (keusAppEvents & KEUS_APP_EVT2)
   \                     ??KEUS_loop_7:
   \   00009F   90....       MOV       DPTR,#keusAppEvents
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?L_MOV_X
   \   0000A7   E5..         MOV       A,?V0
   \   0000A9   5440         ANL       A,#0x40
   \   0000AB   6006         JZ        ??KEUS_loop_8
    187              {
    188                //action here
    189                keusAppEvents ^= KEUS_APP_EVT2;
   \   0000AD   90....       MOV       DPTR,#__Constant_40
   \   0000B0   02....       LJMP      ??KEUS_loop_2 & 0xFFFF
    190              }
    191              else if (keusAppEvents & KEUS_APP_EVT3)
   \                     ??KEUS_loop_8:
   \   0000B3   90....       MOV       DPTR,#keusAppEvents
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?L_MOV_X
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   5480         ANL       A,#0x80
   \   0000BF   6006         JZ        ??KEUS_loop_9
    192              {
    193                //action here
    194                keusAppEvents ^= KEUS_APP_EVT3;
   \   0000C1   90....       MOV       DPTR,#__Constant_80
   \   0000C4   02....       LJMP      ??KEUS_loop_2 & 0xFFFF
    195              }
    196              else if (keusAppEvents & KEUS_APP_EVT4)
   \                     ??KEUS_loop_9:
   \   0000C7   90....       MOV       DPTR,#keusAppEvents
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?L_MOV_X
   \   0000CF   E5..         MOV       A,?V1
   \   0000D1   5401         ANL       A,#0x1
   \   0000D3   7003         JNZ       $+5
   \   0000D5   02....       LJMP      ??KEUS_loop_0 & 0xFFFF
    197              {
    198                exitDebugMode();
   \   0000D8                ; Setup parameters for call to function exitDebugMode
   \   0000D8   12....       LCALL     `??exitDebugMode::?relay`; Banked call to: exitDebugMode
    199                keusAppEvents ^= KEUS_APP_EVT4;
   \   0000DB   90....       MOV       DPTR,#__Constant_100
   \   0000DE   02....       LJMP      ??KEUS_loop_2 & 0xFFFF
    200              }
    201            }
    202          }
    203          
    204          /*********************************************************************
    205           * LOCAL FUNCTIONS
    206           */
    207          
    208          static void zmain_ext_addr(void);
    209          #if defined ZCL_KEY_ESTABLISH
    210          static void zmain_cert_init(void);
    211          #endif
    212          static void zmain_dev_info(void);
    213          static void zmain_vdd_check(void);
    214          
    215          #ifdef LCD_SUPPORTED
    216          static void zmain_lcd_init(void);
    217          #endif
    218          
    219          /*********************************************************************
    220           * @fn      main
    221           * @brief   First function called after startup.
    222           * @return  don't care
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          int main(void)
   \                     main:
    225          {
   \   000000                ; Auto size: 0
    226            // Turn off interrupts
    227            osal_int_disable(INTS_ALL);
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV       R1,#-0x1
   \   000002   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    228          
    229            // Initialization for board related stuff such as LEDs
    230            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL       0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV       A,0x9d
   \   00000A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000C   50FA         JNC       ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV       R0,#-0x8
   \   000011   7901         MOV       R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV       A,R0
   \   000015   24FF         ADD       A,#-0x1
   \   000017   18           DEC       R0
   \   000018   E9           MOV       A,R1
   \   000019   34FF         ADDC      A,#-0x1
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   70F3         JNZ       ??main_1
   \   000020   75C600       MOV       0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV       A,0x9e
   \   000025   70FC         JNZ       ??main_2
   \   000027   43BE04       ORL       0xbe,#0x4
   \   00002A   906270       MOV       DPTR,#0x6270
   \   00002D   7408         MOV       A,#0x8
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   C290         CLR       0x90.0
   \   000032   43FE01       ORL       0xfe,#0x1
   \   000035   C291         CLR       0x90.1
   \   000037   43FE02       ORL       0xfe,#0x2
   \   00003A   C294         CLR       0x90.4
   \   00003C   43FE10       ORL       0xfe,#0x10
   \   00003F   C281         CLR       0x80.1
   \   000041   43FD02       ORL       0xfd,#0x2
   \   000044   438F01       ORL       0x8f,#0x1
    231          
    232            // Make sure supply voltage is high enough to run
    233            zmain_vdd_check();
   \   000047   7E10         MOV       R6,#0x10
   \                     ??main_3:
   \   000049                ; Setup parameters for call to function HalAdcCheckVdd
   \   000049   794E         MOV       R1,#0x4e
   \   00004B   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00004E   E9           MOV       A,R1
   \   00004F   60F8         JZ        ??main_3
   \   000051   1E           DEC       R6
   \   000052   EE           MOV       A,R6
   \   000053   70F4         JNZ       ??main_3
    234          
    235            // Initialize board I/O
    236            InitBoard(OB_COLD);
   \   000055                ; Setup parameters for call to function InitBoard
   \   000055   7900         MOV       R1,#0x0
   \   000057   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    237          
    238            // Initialze HAL drivers
    239            HalDriverInit();
   \   00005A                ; Setup parameters for call to function HalDriverInit
   \   00005A   12....       LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
    240          
    241            // Initialize NV System
    242            osal_nv_init(NULL);
   \   00005D                ; Setup parameters for call to function osal_nv_init
   \   00005D   7A00         MOV       R2,#0x0
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
    243          
    244            // Initialize the MAC
    245            ZMacInit();
   \   000064                ; Setup parameters for call to function ZMacInit
   \   000064   12....       LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
    246          
    247            // Determine the extended address
    248            zmain_ext_addr();
   \   000067                ; Setup parameters for call to function zmain_ext_addr
   \   000067   12....       LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    249          
    250          #if defined ZCL_KEY_ESTABLISH
    251            // Initialize the Certicom certificate information.
    252            zmain_cert_init();
    253          #endif
    254          
    255            // Initialize basic NV items
    256            zgInit();
   \   00006A                ; Setup parameters for call to function zgInit
   \   00006A   12....       LCALL     `??zgInit::?relay`; Banked call to: zgInit
    257          
    258          #ifndef NONWK
    259            // Since the AF isn't a task, call it's initialization routine
    260            afInit();
    261          #endif
    262          
    263            // Initialize the operating system
    264            osal_init_system();
   \   00006D                ; Setup parameters for call to function osal_init_system
   \   00006D   12....       LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
    265          
    266            // Allow interrupts
    267            osal_int_enable(INTS_ALL);
   \   000070                ; Setup parameters for call to function osal_int_enable
   \   000070   79FF         MOV       R1,#-0x1
   \   000072   12....       LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    268          
    269            // Final board initialization
    270            InitBoard(OB_READY);
   \   000075                ; Setup parameters for call to function InitBoard
   \   000075   7902         MOV       R1,#0x2
   \   000077   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    271          
    272            KEUS_init();
   \   00007A                ; Setup parameters for call to function KEUS_init
   \   00007A   12....       LCALL     `??KEUS_init::?relay`; Banked call to: KEUS_init
    273          
    274            KEUS_loop();
   \   00007D                ; Setup parameters for call to function KEUS_loop
   \   00007D   12....       LCALL     `??KEUS_loop::?relay`; Banked call to: KEUS_loop
    275          
    276            // Display information about this device
    277            zmain_dev_info();
    278          
    279          #ifdef WDT_IN_PM1
    280            /* If WDT is used, this is a good place to enable it. */
    281            WatchDogEnable(WDTIMX);
    282          #endif
    283          
    284            osal_start_system(); // No Return from here
   \   000080                ; Setup parameters for call to function osal_start_system
   \   000080   12....       LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
    285          
    286            return 0; // Shouldn't get here.
   \   000083   7A00         MOV       R2,#0x0
   \   000085   7B00         MOV       R3,#0x0
   \   000087   02....       LJMP      ?BRET
   \   00008A                REQUIRE SLEEPCMD
   \   00008A                REQUIRE SLEEPSTA
   \   00008A                REQUIRE CLKCONCMD
   \   00008A                REQUIRE CLKCONSTA
   \   00008A                REQUIRE _A_P1
   \   00008A                REQUIRE P1DIR
   \   00008A                REQUIRE _A_P0
   \   00008A                REQUIRE P0DIR
   \   00008A                REQUIRE P0INP
    287          } // main()
    288          
    289          /*********************************************************************
    290           * @fn      zmain_vdd_check
    291           * @brief   Check if the Vdd is OK to run the processor.
    292           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    293           *********************************************************************/
    294          static void zmain_vdd_check(void)
    295          {
    296            uint8 cnt = 16;
    297            
    298            do
    299            {
    300              while (!HalAdcCheckVdd(VDD_MIN_RUN))
    301                ;
    302            } while (--cnt);
    303          }
    304          
    305          /**************************************************************************************************
    306           * @fn          zmain_ext_addr
    307           *
    308           * @brief       Execute a prioritized search for a valid extended address and write the results
    309           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    310           *
    311           * input parameters
    312           *
    313           * None.
    314           *
    315           * output parameters
    316           *
    317           * None.
    318           *
    319           * @return      None.
    320           **************************************************************************************************
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    324            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    325            uint8 writeNV = TRUE;
    326          
    327            // First check whether a non-erased extended address exists in the OSAL NV.
    328            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL)) ||
    329                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    330                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000019   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V4,R0
   \   000024   89..         MOV       ?V5,R1
   \   000026   F5..         MOV       ?V6,A
   \   000028                ; Setup parameters for call to function osal_nv_item_init
   \   000028   F5..         MOV       ?V8,A
   \   00002A   F5..         MOV       ?V9,A
   \   00002C   78..         MOV       R0,#?V8
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C08         MOV       R4,#0x8
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A01         MOV       R2,#0x1
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7046         JNZ       ??zmain_ext_addr_0
   \   000044                ; Setup parameters for call to function osal_nv_read
   \   000044   75....       MOV       ?V8,#aExtendedAddress & 0xff
   \   000047   75....       MOV       ?V9,#(aExtendedAddress >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V8
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV       ?V8,#0x8
   \   000052   75..00       MOV       ?V9,#0x0
   \   000055   78..         MOV       R0,#?V8
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A01         MOV       R2,#0x1
   \   000060   7B00         MOV       R3,#0x0
   \   000062   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   701D         JNZ       ??zmain_ext_addr_0
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   7C08         MOV       R4,#0x8
   \   000074   7D00         MOV       R5,#0x0
   \   000076   A9..         MOV       R1,?V0
   \   000078   AA..         MOV       R2,?V1
   \   00007A   AB..         MOV       R3,?V2
   \   00007C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007F   7403         MOV       A,#0x3
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??zmain_ext_addr_1 & 0xFFFF
    331            {
    332              // Attempt to read the extended address from the location on the lock bits page
    333              // where the programming tools know to reserve it.
    334              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   00008A                ; Setup parameters for call to function HalFlashRead
   \   00008A   75..08       MOV       ?V8,#0x8
   \   00008D   78..         MOV       R0,#?V8
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000094   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000096   7AE8         MOV       R2,#-0x18
   \   000098   7B07         MOV       R3,#0x7
   \   00009A   797F         MOV       R1,#0x7f
   \   00009C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
    335          
    336              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A4                ; Setup parameters for call to function osal_memcmp
   \   0000A4   78..         MOV       R0,#?V4
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   A9..         MOV       R1,?V0
   \   0000AF   AA..         MOV       R2,?V1
   \   0000B1   AB..         MOV       R3,?V2
   \   0000B3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   6071         JZ        ??zmain_ext_addr_2
    337              {
    338                // Attempt to read the extended address from the designated location in the Info Page.
    339                if (!osal_memcmp((uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000BE                ; Setup parameters for call to function osal_memcmp
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C3   7C08         MOV       R4,#0x8
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   790C         MOV       R1,#0xc
   \   0000C9   7A78         MOV       R2,#0x78
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV       A,R1
   \   0000D6   701D         JNZ       ??zmain_ext_addr_3
    340                {
    341                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   75..0C       MOV       ?V0,#0xc
   \   0000DB   75..78       MOV       ?V1,#0x78
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   7C08         MOV       R4,#0x8
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   0000E9   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   0000EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F3   803A         SJMP      ??zmain_ext_addr_2
    342                }
    343                else // No valid extended address was found.
    344                {
    345                  uint8 idx;
    346          
    347          #if !defined(NV_RESTORE)
    348                  writeNV = FALSE; // Make this a temporary IEEE address
    349          #endif
    350          
    351                  /* Attempt to create a sufficiently random extended address for expediency.
    352                   * Note: this is only valid/legal in a test environment and
    353                   *       must never be used for a commercial product.
    354                   */
    355                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   0000F5   7E00         MOV       R6,#0x0
    356                  {
    357                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   0000F7                ; Setup parameters for call to function osal_rand
   \   0000F7   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000FA   8A..         MOV       ?V0,R2
    358                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   74..         MOV       A,#aExtendedAddress & 0xff
   \   000100   2A           ADD       A,R2
   \   000101   F582         MOV       DPL,A
   \   000103   E4           CLR       A
   \   000104   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000106   F583         MOV       DPH,A
   \   000108   E5..         MOV       A,?V0
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   0E           INC       R6
    359                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   00010C   EE           MOV       A,R6
   \   00010D   F8           MOV       R0,A
   \   00010E   12....       LCALL     ?Subroutine0 & 0xFFFF
    360                  }
   \                     ??CrossCallReturnLabel_0:
   \   000111   EB           MOV       A,R3
   \   000112   F0           MOVX      @DPTR,A
   \   000113   0E           INC       R6
   \   000114   EE           MOV       A,R6
   \   000115   C3           CLR       C
   \   000116   9406         SUBB      A,#0x6
   \   000118   40DD         JC        ??zmain_ext_addr_4
    361                  // Next-to-MSB identifies ZigBee devicetype.
    362          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    363                  aExtendedAddress[idx++] = 0x10;
    364          #elif ZG_BUILD_RTRONLY_TYPE
    365                  aExtendedAddress[idx++] = 0x20;
    366          #else
    367                  aExtendedAddress[idx++] = 0x30;
   \   00011A   08           INC       R0
   \   00011B   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00011E   7430         MOV       A,#0x30
   \   000120   F0           MOVX      @DPTR,A
    368          #endif
    369                  // MSB has historical signficance.
    370                  aExtendedAddress[idx] = 0xF8;
   \   000121   08           INC       R0
   \   000122   74..         MOV       A,#aExtendedAddress & 0xff
   \   000124   28           ADD       A,R0
   \   000125   F582         MOV       DPL,A
   \   000127   E4           CLR       A
   \   000128   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   00012A   F583         MOV       DPH,A
   \   00012C   74F8         MOV       A,#-0x8
   \   00012E   F0           MOVX      @DPTR,A
    371                }
    372              }
    373          
    374              if (writeNV)
    375              {
    376                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00012F                ; Setup parameters for call to function osal_nv_write
   \   00012F   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000132   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000135   78..         MOV       R0,#?V0
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   75..08       MOV       ?V0,#0x8
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140   78..         MOV       R0,#?V0
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   7C00         MOV       R4,#0x0
   \   000147   7D00         MOV       R5,#0x0
   \   000149   7A01         MOV       R2,#0x1
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000150   7404         MOV       A,#0x4
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
    377              }
    378            }
    379          
    380            // Set the MAC PIB extended address according to results from above.
    381            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000155                ; Setup parameters for call to function ZMacSetReq
   \   000155   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000157   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000159   79E2         MOV       R1,#-0x1e
   \   00015B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    382          }
   \   00015E   7408         MOV       A,#0x8
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   7F0A         MOV       R7,#0xa
   \   000165   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV       A,#aExtendedAddress & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEUS INIT">`:
   \   000000   4B455553     DB "KEUS INIT"
   \            20494E49
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2:
   \   000000   02000000     DD 2

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4:
   \   000000   04000000     DD 4

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8:
   \   000000   08000000     DD 8

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_20:
   \   000000   20000000     DD 32

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40:
   \   000000   40000000     DD 64

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_80:
   \   000000   80000000     DD 128

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_100:
   \   000000   00010000     DD 256
    383          
    384          #if defined ZCL_KEY_ESTABLISH
    385          /**************************************************************************************************
    386           * @fn          zmain_cert_init
    387           *
    388           * @brief       Initialize the Certicom certificate information.
    389           *
    390           * input parameters
    391           *
    392           * None.
    393           *
    394           * output parameters
    395           *
    396           * None.
    397           *
    398           * @return      None.
    399           **************************************************************************************************
    400           */
    401          static void zmain_cert_init(void)
    402          {
    403            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    404            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    405                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    406                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    407                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    408                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    409                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    410                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    411          
    412            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    413            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    414          
    415            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    416            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    417            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL)) ||
    418                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData)) ||
    419                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    420            {
    421              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    422              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    423                           ZCL_KE_CA_PUBLIC_KEY_LEN);
    424              // If the certificate data is not NULL, use it to update the corresponding NV items.
    425              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    426              {
    427                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    428                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    429                             ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    430                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    431                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    432                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    433                             ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    434                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    435              }
    436            }
    437          }
    438          #endif
    439          
    440          /**************************************************************************************************
    441           * @fn          zmain_dev_info
    442           *
    443           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    444           *
    445           * input parameters
    446           *
    447           * None.
    448           *
    449           * output parameters
    450           *
    451           * None.
    452           *
    453           * @return      None.
    454           **************************************************************************************************
    455           */
    456          static void zmain_dev_info(void)
    457          {
    458          
    459          #if defined(SERIAL_DEBUG_SUPPORTED) || (defined(LEGACY_LCD_DEBUG) && defined(LCD_SUPPORTED))
    460            uint8 i;
    461            uint8 *xad;
    462            uint8 lcd_buf[Z_EXTADDR_LEN * 2 + 1];
    463          
    464            // Display the extended address.
    465            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    466          
    467            for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
    468            {
    469              uint8 ch;
    470              ch = (*xad >> 4) & 0x0F;
    471              lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
    472              ch = *xad & 0x0F;
    473              lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
    474            }
    475            lcd_buf[Z_EXTADDR_LEN * 2] = '\0';
    476            HalLcdWriteString("IEEE: ", HAL_LCD_DEBUG_LINE_1);
    477            HalLcdWriteString((char *)lcd_buf, HAL_LCD_DEBUG_LINE_2);
    478          #endif
    479          }
    480          
    481          #ifdef LCD_SUPPORTED
    482          /*********************************************************************
    483           * @fn      zmain_lcd_init
    484           * @brief   Initialize LCD at start up.
    485           * @return  none
    486           *********************************************************************/
    487          static void zmain_lcd_init(void)
    488          {
    489          #ifdef SERIAL_DEBUG_SUPPORTED
    490            {
    491              HalLcdWriteString("TexasInstruments", HAL_LCD_DEBUG_LINE_1);
    492          
    493          #if defined(MT_MAC_FUNC)
    494          #if defined(ZDO_COORDINATOR)
    495              HalLcdWriteString("MAC-MT Coord", HAL_LCD_DEBUG_LINE_2);
    496          #else
    497              HalLcdWriteString("MAC-MT Device", HAL_LCD_DEBUG_LINE_2);
    498          #endif // ZDO
    499          #elif defined(MT_NWK_FUNC)
    500          #if defined(ZDO_COORDINATOR)
    501              HalLcdWriteString("NWK Coordinator", HAL_LCD_DEBUG_LINE_2);
    502          #else
    503              HalLcdWriteString("NWK Device", HAL_LCD_DEBUG_LINE_2);
    504          #endif // ZDO
    505          #endif // MT_FUNC
    506            }
    507          #endif // SERIAL_DEBUG_SUPPORTED
    508          }
    509          #endif
    510          
    511          /*********************************************************************
    512          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   KEUS_init
        0     10   -> HalUARTWrite
        0     10   -> KeusTimerUtilInit
        0     10   -> KeusTimerUtilStartTimer
        0     10   -> initUart
        0     10   -> keusButtonInit
        0     10   -> keusLEDInit
        0     10   -> osal_strlen
      0     12   KEUS_loop
        0     12   -> HalUARTPoll
        0     12   -> buttonPressAction
        0     12   -> exitDebugMode
        0     12   -> parseUart
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> KEUS_init
        0      0   -> KEUS_loop
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_ext_addr
      1     30   zmain_ext_addr
        0     28   -> HalFlashRead
        0     26   -> ZMacSetReq
        0     29   -> osal_memcmp
        0     29   -> osal_memcpy
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_read
        0     30   -> osal_nv_write
        0     26   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "KEUS INIT">
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
      47  KEUS_init
     225  KEUS_loop
       1  P0DIR
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P0
       1  _A_P1
       4  __Constant_1
       4  __Constant_10
       4  __Constant_100
       4  __Constant_2
       4  __Constant_20
       4  __Constant_4
       4  __Constant_40
       4  __Constant_8
       4  __Constant_80
       4  keusAppEvents
     138  main
     360  zmain_ext_addr
      24  -- Other

 
 781 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  54 bytes in segment XDATA_ROM_C
   4 bytes in segment XDATA_Z
 
  24 bytes of CODE     memory
  18 bytes of CONST    memory (+ 36 bytes shared)
   0 bytes of DATA     memory (+  9 bytes shared)
 781 bytes of HUGECODE memory
   4 bytes of XDATA    memory

Errors: none
Warnings: none
