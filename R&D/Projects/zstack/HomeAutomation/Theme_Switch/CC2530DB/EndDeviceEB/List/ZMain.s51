///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              07/Jan/2020  16:06:09
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\ZMain\TI2530DB\ZMain.c
//    Command line       =  
//        -f C:\Users\Souvik\AppData\Local\Temp\EW22AF.tmp
//        ("D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\ZMain\TI2530DB\ZMain.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D HAL_KEY=FALSE -D
//        HAL_LCD=FALSE -D HAL_LED=FALSE -D MULTICAST_ENABLED=FALSE -D ZCL_READ
//        -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        KEUS_GPIO_INTERRUPT_HANDLER_DISABLE -D HAL_UART=TRUE -D
//        HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HAL_UART_DMA_RX_MAX=64 -D
//        HAL_UART_DMA_TX_MAX=64 -D INT_HEAP_LEN=3172 -lC "D:\VB_Shared\Zigbee
//        Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\VB_Shared\Zigbee
//        Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\" -I
//        "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\Source\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\Source\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\..\..\..\..\..\Components\keus\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        D:\VB_Shared\Zigbee Resources\CC2530
//        Development\Projects\zstack\HomeAutomation\Theme_Switch\CC2530DB\EndDeviceEB\List\ZMain.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZMain

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?L_XOR_TO_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC `??KEUS_init::?relay`
        FUNCTION `??KEUS_init::?relay`,0203H
        PUBLIC `??KEUS_loop::?relay`
        FUNCTION `??KEUS_loop::?relay`,0203H
        PUBLIC `??main::?relay`
        FUNCTION `??main::?relay`,0203H
        FUNCTION `??zmain_ext_addr::?relay`,0203H
        PUBWEAK CLKCONCMD
        PUBWEAK CLKCONSTA
        PUBLIC KEUS_init
        FUNCTION KEUS_init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC KEUS_loop
        FUNCTION KEUS_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P1DIR
        PUBWEAK SLEEPCMD
        PUBWEAK SLEEPSTA
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_1
        PUBWEAK __Constant_10
        PUBWEAK __Constant_100
        PUBWEAK __Constant_2
        PUBWEAK __Constant_20
        PUBWEAK __Constant_4
        PUBWEAK __Constant_40
        PUBWEAK __Constant_8
        PUBWEAK __Constant_80
        PUBLIC keusAppEvents
        PUBLIC main
        FUNCTION main,0a1a03H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zmain_ext_addr,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` Undefined
          CFI `B.BR0` Undefined
          CFI `B.BR1` Undefined
          CFI `B.BR2` Undefined
          CFI `B.BR3` Undefined
          CFI `B.BR4` Undefined
          CFI `B.BR5` Undefined
          CFI `B.BR6` Undefined
          CFI `B.BR7` Undefined
          CFI `VB.BR8` Undefined
          CFI `VB.BR9` Undefined
          CFI `VB.BR10` Undefined
          CFI `VB.BR11` Undefined
          CFI `VB.BR12` Undefined
          CFI `VB.BR13` Undefined
          CFI `VB.BR14` Undefined
          CFI `VB.BR15` Undefined
          CFI VB Undefined
          CFI B Undefined
          CFI A Undefined
          CFI PSW Undefined
          CFI DPL0 Undefined
          CFI DPH0 Undefined
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 Undefined
          CFI R7 Undefined
          CFI V0 Undefined
          CFI V1 Undefined
          CFI V2 Undefined
          CFI V3 Undefined
          CFI V4 Undefined
          CFI V5 Undefined
          CFI V6 Undefined
          CFI V7 Undefined
          CFI V8 Undefined
          CFI V9 Undefined
          CFI V10 Undefined
          CFI V11 Undefined
          CFI V12 Undefined
          CFI V13 Undefined
          CFI V14 Undefined
          CFI V15 Undefined
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
        
          CFI Common cfiCommon2 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon2
        
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
`??HalAdcCheckVdd::?relay` SYMBOL "?relay", HalAdcCheckVdd
HalDriverInit       SYMBOL "HalDriverInit"
`??HalDriverInit::?relay` SYMBOL "?relay", HalDriverInit
HalFlashRead        SYMBOL "HalFlashRead"
`??HalFlashRead::?relay` SYMBOL "?relay", HalFlashRead
HalUARTPoll         SYMBOL "HalUARTPoll"
`??HalUARTPoll::?relay` SYMBOL "?relay", HalUARTPoll
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
InitBoard           SYMBOL "InitBoard"
`??InitBoard::?relay` SYMBOL "?relay", InitBoard
KeusTimerUtilInit   SYMBOL "KeusTimerUtilInit"
`??KeusTimerUtilInit::?relay` SYMBOL "?relay", KeusTimerUtilInit
KeusTimerUtilStartTimer SYMBOL "KeusTimerUtilStartTimer"
`??KeusTimerUtilStartTimer::?relay` SYMBOL "?relay", KeusTimerUtilStartTimer
ZMacInit            SYMBOL "ZMacInit"
`??ZMacInit::?relay` SYMBOL "?relay", ZMacInit
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
buttonPressAction   SYMBOL "buttonPressAction"
`??buttonPressAction::?relay` SYMBOL "?relay", buttonPressAction
exitDebugMode       SYMBOL "exitDebugMode"
`??exitDebugMode::?relay` SYMBOL "?relay", exitDebugMode
initUart            SYMBOL "initUart"
`??initUart::?relay` SYMBOL "?relay", initUart
keusButtonInit      SYMBOL "keusButtonInit"
`??keusButtonInit::?relay` SYMBOL "?relay", keusButtonInit
keusLEDInit         SYMBOL "keusLEDInit"
`??keusLEDInit::?relay` SYMBOL "?relay", keusLEDInit
osal_init_system    SYMBOL "osal_init_system"
`??osal_init_system::?relay` SYMBOL "?relay", osal_init_system
osal_int_disable    SYMBOL "osal_int_disable"
`??osal_int_disable::?relay` SYMBOL "?relay", osal_int_disable
osal_int_enable     SYMBOL "osal_int_enable"
`??osal_int_enable::?relay` SYMBOL "?relay", osal_int_enable
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_nv_init        SYMBOL "osal_nv_init"
`??osal_nv_init::?relay` SYMBOL "?relay", osal_nv_init
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_start_system   SYMBOL "osal_start_system"
`??osal_start_system::?relay` SYMBOL "?relay", osal_start_system
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
parseUart           SYMBOL "parseUart"
`??parseUart::?relay` SYMBOL "?relay", parseUart
zgInit              SYMBOL "zgInit"
`??zgInit::?relay`  SYMBOL "?relay", zgInit
KEUS_init           SYMBOL "KEUS_init"
`??KEUS_init::?relay` SYMBOL "?relay", KEUS_init
KEUS_loop           SYMBOL "KEUS_loop"
`??KEUS_loop::?relay` SYMBOL "?relay", KEUS_loop
main                SYMBOL "main"
`??main::?relay`    SYMBOL "?relay", main

        EXTERN `??HalAdcCheckVdd::?relay`
        FUNCTION `??HalAdcCheckVdd::?relay`,00H
        EXTERN `??HalDriverInit::?relay`
        FUNCTION `??HalDriverInit::?relay`,00H
        EXTERN `??HalFlashRead::?relay`
        FUNCTION `??HalFlashRead::?relay`,00H
        EXTERN `??HalUARTPoll::?relay`
        FUNCTION `??HalUARTPoll::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??InitBoard::?relay`
        FUNCTION `??InitBoard::?relay`,00H
        EXTERN `??KeusTimerUtilInit::?relay`
        FUNCTION `??KeusTimerUtilInit::?relay`,00H
        EXTERN `??KeusTimerUtilStartTimer::?relay`
        FUNCTION `??KeusTimerUtilStartTimer::?relay`,00H
        EXTERN `??ZMacInit::?relay`
        FUNCTION `??ZMacInit::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??buttonPressAction::?relay`
        FUNCTION `??buttonPressAction::?relay`,00H
        EXTERN `??exitDebugMode::?relay`
        FUNCTION `??exitDebugMode::?relay`,00H
        EXTERN `??initUart::?relay`
        FUNCTION `??initUart::?relay`,00H
        EXTERN `??keusButtonInit::?relay`
        FUNCTION `??keusButtonInit::?relay`,00H
        EXTERN `??keusLEDInit::?relay`
        FUNCTION `??keusLEDInit::?relay`,00H
        EXTERN `??osal_init_system::?relay`
        FUNCTION `??osal_init_system::?relay`,00H
        EXTERN `??osal_int_disable::?relay`
        FUNCTION `??osal_int_disable::?relay`,00H
        EXTERN `??osal_int_enable::?relay`
        FUNCTION `??osal_int_enable::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_nv_init::?relay`
        FUNCTION `??osal_nv_init::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_start_system::?relay`
        FUNCTION `??osal_start_system::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??parseUart::?relay`
        FUNCTION `??parseUart::?relay`,00H
        EXTERN `??zgInit::?relay`
        FUNCTION `??zgInit::?relay`,00H
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalDriverInit
        FUNCTION HalDriverInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashRead
        FUNCTION HalFlashRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTPoll
        FUNCTION HalUARTPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN InitBoard
        FUNCTION InitBoard,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilInit
        FUNCTION KeusTimerUtilInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KeusTimerUtilStartTimer
        FUNCTION KeusTimerUtilStartTimer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacInit
        FUNCTION ZMacInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aExtendedAddress
        EXTERN buttonPressAction
        FUNCTION buttonPressAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN exitDebugMode
        FUNCTION exitDebugMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initUart
        FUNCTION initUart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN keusButtonInit
        FUNCTION keusButtonInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN keusLEDInit
        FUNCTION keusLEDInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_init_system
        FUNCTION osal_init_system,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_enable
        FUNCTION osal_int_enable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_init
        FUNCTION osal_nv_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_system
        FUNCTION osal_start_system,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN parseUart
        FUNCTION parseUart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInit
        FUNCTION zgInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\VB_Shared\Zigbee Resources\CC2530 Development\Projects\zstack\ZMain\TI2530DB\ZMain.c
//    1 /**************************************************************************************************
//    2   Filename:       ZMain.c
//    3   Revised:        $Date: 2020-06-01 18:54:30 -0700 (Monday, 06 Jan 2020) $
//    4 
//    5   Description:    Mapping Scene to buttons
//    6                   Blinking indication LEDs
//    7                   Keus Theme Switch
//    8 
//    9   Notes:          This version targets the Chipcon CC2530
//   10 
//   11 
//   12 
//   13 **************************************************************************************************/
//   14 
//   15 /*********************************************************************
//   16  * INCLUDES
//   17  */
//   18 
//   19 #ifndef NONWK
//   20 #include "AF.h"
//   21 #endif
//   22 #include "hal_adc.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   23 #include "hal_flash.h"
//   24 #include "hal_lcd.h"
//   25 #include "hal_led.h"
//   26 #include "hal_uart.h"
//   27 #include "hal_drivers.h"
//   28 #include "OnBoard.h"
//   29 #include "OSAL.h"
//   30 #include "OSAL_Nv.h"
//   31 #include "ZComDef.h"
//   32 #include "ZMAC.h"
//   33 #include "keus_gpio_util.h"
//   34 #include "keus_timer_util.h"
//   35 
//   36 /*********************************************************************
//   37  * CUSTOM CODE
//   38  */
//   39 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   40 volatile uint32 keusAppEvents = 0;
keusAppEvents:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   41 
//   42 //Event bit masks
//   43 #define KEUS_BUTTON1 0x1
//   44 #define KEUS_BUTTON2 0x2
//   45 #define KEUS_BUTTON3 0x4
//   46 #define KEUS_BUTTON4 0x8
//   47 #define KEUS_UART 0x10
//   48 #define KEUS_APP_EVT1 0X20
//   49 #define KEUS_APP_EVT2 0X40
//   50 #define KEUS_APP_EVT3 0X80
//   51 #define KEUS_APP_EVT4 0X100
//   52 
//   53 #define BUTTON1_ID 1
//   54 #define BUTTON2_ID 2
//   55 #define BUTTON3_ID 3
//   56 #define BUTTON4_ID 4
//   57 
//   58 extern void keusButtonInit(void);
//   59 extern void exitDebugMode(void);
//   60 
//   61 #define SCN_ARR_NVIC_LOCATION 0x10
//   62 
//   63 extern void parseUart(void);
//   64 extern void initUart(void);
//   65 extern void keusLEDInit(void);
//   66 void buttonPressAction(uint8 buttonId);
//   67 
//   68 //void KEUS_delayms(uint16 ms);
//   69 void KEUS_init(void);
//   70 void KEUS_loop(void); //the actual polling
//   71 
//   72 //does nvic operations and returns status of nvic operations
//   73 // bool KeusThemeSwitchMiniMemoryInit(void);
//   74 // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void);
//   75 // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void);
//   76 
//   77 //status of nvic operations
//   78 // uint8 initStatus = 0;
//   79 // uint8 writeStatus = 0;
//   80 // uint8 readStatus = 0;
//   81 
//   82 // void KEUS_delayms(uint16 ms)
//   83 // {
//   84 //   for (uint16 i = 0; i < ms; i++)
//   85 //   {
//   86 //     Onboard_wait(1000);
//   87 //   }
//   88 // }
//   89 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   90 void KEUS_init()
KEUS_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function KEUS_init
        CODE
//   91 {
        FUNCALL KEUS_init, initUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init, keusButtonInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init, keusLEDInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init, KeusTimerUtilInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init, KeusTimerUtilStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   92   initUart();
        ; Setup parameters for call to function initUart
        LCALL     `??initUart::?relay`; Banked call to: initUart
//   93   keusButtonInit();
        ; Setup parameters for call to function keusButtonInit
        LCALL     `??keusButtonInit::?relay`; Banked call to: keusButtonInit
//   94   keusLEDInit();
        ; Setup parameters for call to function keusLEDInit
        LCALL     `??keusLEDInit::?relay`; Banked call to: keusLEDInit
//   95 
//   96   KeusTimerUtilInit();
        ; Setup parameters for call to function KeusTimerUtilInit
        LCALL     `??KeusTimerUtilInit::?relay`; Banked call to: KeusTimerUtilInit
//   97   KeusTimerUtilStartTimer();
        ; Setup parameters for call to function KeusTimerUtilStartTimer
        LCALL     `??KeusTimerUtilStartTimer::?relay`; Banked call to: KeusTimerUtilStartTimer
//   98   //initStatus = KeusThemeSwitchMiniMemoryInit();
//   99   //osal_nv_item_init(SCN_ARR_NVIC_LOCATION, sizeof(arr_scene), (void *)arr_scene);
//  100   //readStatus = KeusThemeSwitchMiniReadConfigDataIntoMemory();
//  101   //restoring scenes back to memory at startup
//  102   //osal_nv_read(SCN_ARR_NVIC_LOCATION, 0, sizeof(arr_scene), (void *)arr_scene);
//  103   HalUARTWrite(HAL_UART_PORT_0, "KEUS INIT", (byte)osal_strlen("KEUS INIT"));
        ; Setup parameters for call to function osal_strlen
        MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
        MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V0,R2
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,?V0
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "KEUS INIT">` & 0xff
        MOV       R3,#(`?<Constant "KEUS INIT">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  104 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  105 
//  106 // bool KeusThemeSwitchMiniMemoryInit(void)
//  107 // {
//  108 
//  109 //   uint8 res = osal_nv_item_init(0x10, sizeof(arr_scene), (void *)arr_scene);
//  110 
//  111 //   if (res == SUCCESS || res == NV_ITEM_UNINIT)
//  112 //   {
//  113 //     return true;
//  114 //   }
//  115 //   else
//  116 //   {
//  117 //     return false;
//  118 //   }
//  119 // }
//  120 
//  121 // bool KeusThemeSwitchMiniWriteConfigDataIntoMemory(void)
//  122 // {
//  123 //   uint8 res = osal_nv_write(0x10, 0, sizeof(arr_scene), (void *)arr_scene);
//  124 
//  125 //   if (res == SUCCESS)
//  126 //   {
//  127 //     return true;
//  128 //   }
//  129 //   else
//  130 //   {
//  131 //     return false;
//  132 //   }
//  133 // }
//  134 
//  135 // bool KeusThemeSwitchMiniReadConfigDataIntoMemory(void)
//  136 // {
//  137 //   uint8 res = osal_nv_read(0x10, 0, sizeof(arr_scene), (void *)arr_scene);
//  138 
//  139 //   if (res == SUCCESS)
//  140 //   {
//  141 //     return true;
//  142 //   }
//  143 //   else
//  144 //   {
//  145 //     return false;
//  146 //   }
//  147 // }
//  148 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  149 void KEUS_loop()
KEUS_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function KEUS_loop
        CODE
//  150 {
        FUNCALL KEUS_loop, parseUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_loop, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_loop, buttonPressAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_loop, buttonPressAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_loop, buttonPressAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_loop, buttonPressAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KEUS_loop, exitDebugMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        SJMP      ??KEUS_loop_0
//  151   while (1)
//  152   {
//  153     HalUARTPoll();
//  154     //KEUS_delayms(1000);
//  155 
//  156     if (keusAppEvents & KEUS_UART)
//  157     {
//  158       parseUart();
??KEUS_loop_1:
        ; Setup parameters for call to function parseUart
        LCALL     `??parseUart::?relay`; Banked call to: parseUart
//  159       keusAppEvents ^= KEUS_UART;
        MOV       DPTR,#__Constant_10
??KEUS_loop_2:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_XOR_TO_X
//  160     }
??KEUS_loop_0:
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x10
        JNZ       ??KEUS_loop_1
//  161     else if (keusAppEvents & KEUS_BUTTON1)
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.0
        JNC       ??KEUS_loop_3
//  162     {
//  163       buttonPressAction(BUTTON1_ID);
        ; Setup parameters for call to function buttonPressAction
        MOV       R1,#0x1
        LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
//  164       keusAppEvents ^= KEUS_BUTTON1;
        MOV       DPTR,#__Constant_1
        SJMP      ??KEUS_loop_2
//  165     }
//  166     else if (keusAppEvents & KEUS_BUTTON2)
??KEUS_loop_3:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x2
        JZ        ??KEUS_loop_4
//  167     {
//  168       buttonPressAction(BUTTON2_ID);
        ; Setup parameters for call to function buttonPressAction
        MOV       R1,#0x2
        LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
//  169       keusAppEvents ^= KEUS_BUTTON2;
        MOV       DPTR,#__Constant_2
        SJMP      ??KEUS_loop_2
//  170     }
//  171     else if (keusAppEvents & KEUS_BUTTON3)
??KEUS_loop_4:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x4
        JZ        ??KEUS_loop_5
//  172     {
//  173       buttonPressAction(BUTTON3_ID);
        ; Setup parameters for call to function buttonPressAction
        MOV       R1,#0x3
        LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
//  174       keusAppEvents ^= KEUS_BUTTON3;
        MOV       DPTR,#__Constant_4
        SJMP      ??KEUS_loop_2
//  175     }
//  176     else if (keusAppEvents & KEUS_BUTTON4)
??KEUS_loop_5:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x8
        JZ        ??KEUS_loop_6
//  177     {
//  178       buttonPressAction(BUTTON4_ID);
        ; Setup parameters for call to function buttonPressAction
        MOV       R1,#0x4
        LCALL     `??buttonPressAction::?relay`; Banked call to: buttonPressAction
//  179       keusAppEvents ^= KEUS_BUTTON4;
        MOV       DPTR,#__Constant_8
        SJMP      ??KEUS_loop_2
//  180     }
//  181     else if (keusAppEvents & KEUS_APP_EVT1)
??KEUS_loop_6:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x20
        JZ        ??KEUS_loop_7
//  182     {
//  183       //action here
//  184       keusAppEvents ^= KEUS_APP_EVT1;
        MOV       DPTR,#__Constant_20
        LJMP      ??KEUS_loop_2 & 0xFFFF
//  185     }
//  186     else if (keusAppEvents & KEUS_APP_EVT2)
??KEUS_loop_7:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x40
        JZ        ??KEUS_loop_8
//  187     {
//  188       //action here
//  189       keusAppEvents ^= KEUS_APP_EVT2;
        MOV       DPTR,#__Constant_40
        LJMP      ??KEUS_loop_2 & 0xFFFF
//  190     }
//  191     else if (keusAppEvents & KEUS_APP_EVT3)
??KEUS_loop_8:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x80
        JZ        ??KEUS_loop_9
//  192     {
//  193       //action here
//  194       keusAppEvents ^= KEUS_APP_EVT3;
        MOV       DPTR,#__Constant_80
        LJMP      ??KEUS_loop_2 & 0xFFFF
//  195     }
//  196     else if (keusAppEvents & KEUS_APP_EVT4)
??KEUS_loop_9:
        MOV       DPTR,#keusAppEvents
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V1
        ANL       A,#0x1
        JNZ       $+5
        LJMP      ??KEUS_loop_0 & 0xFFFF
//  197     {
//  198       exitDebugMode();
        ; Setup parameters for call to function exitDebugMode
        LCALL     `??exitDebugMode::?relay`; Banked call to: exitDebugMode
//  199       keusAppEvents ^= KEUS_APP_EVT4;
        MOV       DPTR,#__Constant_100
        LJMP      ??KEUS_loop_2 & 0xFFFF
//  200     }
//  201   }
//  202 }
          CFI EndBlock cfiBlock1
//  203 
//  204 /*********************************************************************
//  205  * LOCAL FUNCTIONS
//  206  */
//  207 
//  208 static void zmain_ext_addr(void);
//  209 #if defined ZCL_KEY_ESTABLISH
//  210 static void zmain_cert_init(void);
//  211 #endif
//  212 static void zmain_dev_info(void);
//  213 static void zmain_vdd_check(void);
//  214 
//  215 #ifdef LCD_SUPPORTED
//  216 static void zmain_lcd_init(void);
//  217 #endif
//  218 
//  219 /*********************************************************************
//  220  * @fn      main
//  221  * @brief   First function called after startup.
//  222  * @return  don't care
//  223  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  224 int main(void)
main:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function main
        CODE
//  225 {
        FUNCALL main, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, InitBoard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalDriverInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_nv_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, ZMacInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zmain_ext_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zgInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_init_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_int_enable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, InitBoard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, KEUS_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, KEUS_loop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_start_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Auto size: 0
//  226   // Turn off interrupts
//  227   osal_int_disable(INTS_ALL);
        ; Setup parameters for call to function osal_int_disable
        MOV       R1,#-0x1
        LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
//  228 
//  229   // Initialization for board related stuff such as LEDs
//  230   HAL_BOARD_INIT();
        ANL       0xbe,#0xfb
??main_0:
        MOV       A,0x9d
        MOV       C,0xE0 /* A   */.6
        JNC       ??main_0
        NOP
        MOV       R0,#-0x8
        MOV       R1,#0x1
??main_1:
        NOP
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??main_1
        MOV       0xc6,#0x0
??main_2:
        MOV       A,0x9e
        JNZ       ??main_2
        ORL       0xbe,#0x4
        MOV       DPTR,#0x6270
        MOV       A,#0x8
        MOVX      @DPTR,A
        CLR       0x90.0
        ORL       0xfe,#0x1
        CLR       0x90.1
        ORL       0xfe,#0x2
        CLR       0x90.4
        ORL       0xfe,#0x10
        CLR       0x80.1
        ORL       0xfd,#0x2
        ORL       0x8f,#0x1
//  231 
//  232   // Make sure supply voltage is high enough to run
//  233   zmain_vdd_check();
        MOV       R6,#0x10
??main_3:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV       R1,#0x4e
        LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
        MOV       A,R1
        JZ        ??main_3
        DEC       R6
        MOV       A,R6
        JNZ       ??main_3
//  234 
//  235   // Initialize board I/O
//  236   InitBoard(OB_COLD);
        ; Setup parameters for call to function InitBoard
        MOV       R1,#0x0
        LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
//  237 
//  238   // Initialze HAL drivers
//  239   HalDriverInit();
        ; Setup parameters for call to function HalDriverInit
        LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
//  240 
//  241   // Initialize NV System
//  242   osal_nv_init(NULL);
        ; Setup parameters for call to function osal_nv_init
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
//  243 
//  244   // Initialize the MAC
//  245   ZMacInit();
        ; Setup parameters for call to function ZMacInit
        LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
//  246 
//  247   // Determine the extended address
//  248   zmain_ext_addr();
        ; Setup parameters for call to function zmain_ext_addr
        LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
//  249 
//  250 #if defined ZCL_KEY_ESTABLISH
//  251   // Initialize the Certicom certificate information.
//  252   zmain_cert_init();
//  253 #endif
//  254 
//  255   // Initialize basic NV items
//  256   zgInit();
        ; Setup parameters for call to function zgInit
        LCALL     `??zgInit::?relay`; Banked call to: zgInit
//  257 
//  258 #ifndef NONWK
//  259   // Since the AF isn't a task, call it's initialization routine
//  260   afInit();
//  261 #endif
//  262 
//  263   // Initialize the operating system
//  264   osal_init_system();
        ; Setup parameters for call to function osal_init_system
        LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
//  265 
//  266   // Allow interrupts
//  267   osal_int_enable(INTS_ALL);
        ; Setup parameters for call to function osal_int_enable
        MOV       R1,#-0x1
        LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
//  268 
//  269   // Final board initialization
//  270   InitBoard(OB_READY);
        ; Setup parameters for call to function InitBoard
        MOV       R1,#0x2
        LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
//  271 
//  272   KEUS_init();
        ; Setup parameters for call to function KEUS_init
        LCALL     `??KEUS_init::?relay`; Banked call to: KEUS_init
//  273 
//  274   KEUS_loop();
        ; Setup parameters for call to function KEUS_loop
        LCALL     `??KEUS_loop::?relay`; Banked call to: KEUS_loop
//  275 
//  276   // Display information about this device
//  277   zmain_dev_info();
//  278 
//  279 #ifdef WDT_IN_PM1
//  280   /* If WDT is used, this is a good place to enable it. */
//  281   WatchDogEnable(WDTIMX);
//  282 #endif
//  283 
//  284   osal_start_system(); // No Return from here
        ; Setup parameters for call to function osal_start_system
        LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
//  285 
//  286   return 0; // Shouldn't get here.
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
        REQUIRE SLEEPCMD
        REQUIRE SLEEPSTA
        REQUIRE CLKCONCMD
        REQUIRE CLKCONSTA
        REQUIRE _A_P1
        REQUIRE P1DIR
        REQUIRE _A_P0
        REQUIRE P0DIR
        REQUIRE P0INP
//  287 } // main()
//  288 
//  289 /*********************************************************************
//  290  * @fn      zmain_vdd_check
//  291  * @brief   Check if the Vdd is OK to run the processor.
//  292  * @return  Return if Vdd is ok; otherwise, flash LED, then reset
//  293  *********************************************************************/
//  294 static void zmain_vdd_check(void)
//  295 {
//  296   uint8 cnt = 16;
//  297   
//  298   do
//  299   {
//  300     while (!HalAdcCheckVdd(VDD_MIN_RUN))
//  301       ;
//  302   } while (--cnt);
//  303 }
//  304 
//  305 /**************************************************************************************************
//  306  * @fn          zmain_ext_addr
//  307  *
//  308  * @brief       Execute a prioritized search for a valid extended address and write the results
//  309  *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
//  310  *
//  311  * input parameters
//  312  *
//  313  * None.
//  314  *
//  315  * output parameters
//  316  *
//  317  * None.
//  318  *
//  319  * @return      None.
//  320  **************************************************************************************************
//  321  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  322 static void zmain_ext_addr(void)
zmain_ext_addr:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zmain_ext_addr
        CODE
//  323 {
        FUNCALL zmain_ext_addr, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  324   uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  325   uint8 writeNV = TRUE;
//  326 
//  327   // First check whether a non-erased extended address exists in the OSAL NV.
//  328   if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL)) ||
//  329       (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
//  330       (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
        MOV       ?V0,#aExtendedAddress & 0xff
        MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
        MOV       ?V2,A
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,A
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V8,A
        MOV       ?V9,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       ??zmain_ext_addr_0
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V8,#aExtendedAddress & 0xff
        MOV       ?V9,#(aExtendedAddress >> 8) & 0xff
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V8,#0x8
        MOV       ?V9,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       ??zmain_ext_addr_0
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??zmain_ext_addr_1 & 0xFFFF
//  331   {
//  332     // Attempt to read the extended address from the location on the lock bits page
//  333     // where the programming tools know to reserve it.
//  334     HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
??zmain_ext_addr_0:
        ; Setup parameters for call to function HalFlashRead
        MOV       ?V8,#0x8
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#aExtendedAddress & 0xff
        MOV       R5,#(aExtendedAddress >> 8) & 0xff
        MOV       R2,#-0x18
        MOV       R3,#0x7
        MOV       R1,#0x7f
        LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  335 
//  336     if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JZ        ??zmain_ext_addr_2
//  337     {
//  338       // Attempt to read the extended address from the designated location in the Info Page.
//  339       if (!osal_memcmp((uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0xc
        MOV       R2,#0x78
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       ??zmain_ext_addr_3
//  340       {
//  341         osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE + HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#0xc
        MOV       ?V1,#0x78
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,#aExtendedAddress & 0xff
        MOV       R3,#(aExtendedAddress >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        SJMP      ??zmain_ext_addr_2
//  342       }
//  343       else // No valid extended address was found.
//  344       {
//  345         uint8 idx;
//  346 
//  347 #if !defined(NV_RESTORE)
//  348         writeNV = FALSE; // Make this a temporary IEEE address
//  349 #endif
//  350 
//  351         /* Attempt to create a sufficiently random extended address for expediency.
//  352          * Note: this is only valid/legal in a test environment and
//  353          *       must never be used for a commercial product.
//  354          */
//  355         for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
??zmain_ext_addr_3:
        MOV       R6,#0x0
//  356         {
//  357           uint16 randy = osal_rand();
??zmain_ext_addr_4:
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       ?V0,R2
//  358           aExtendedAddress[idx++] = LO_UINT16(randy);
        MOV       A,R6
        MOV       R2,A
        MOV       A,#aExtendedAddress & 0xff
        ADD       A,R2
        MOV       DPL,A
        CLR       A
        ADDC      A,#(aExtendedAddress >> 8) & 0xff
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       R6
//  359           aExtendedAddress[idx++] = HI_UINT16(randy);
        MOV       A,R6
        MOV       R0,A
        LCALL     ?Subroutine0 & 0xFFFF
//  360         }
??CrossCallReturnLabel_0:
        MOV       A,R3
        MOVX      @DPTR,A
        INC       R6
        MOV       A,R6
        CLR       C
        SUBB      A,#0x6
        JC        ??zmain_ext_addr_4
//  361         // Next-to-MSB identifies ZigBee devicetype.
//  362 #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
//  363         aExtendedAddress[idx++] = 0x10;
//  364 #elif ZG_BUILD_RTRONLY_TYPE
//  365         aExtendedAddress[idx++] = 0x20;
//  366 #else
//  367         aExtendedAddress[idx++] = 0x30;
        INC       R0
        LCALL     ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV       A,#0x30
        MOVX      @DPTR,A
//  368 #endif
//  369         // MSB has historical signficance.
//  370         aExtendedAddress[idx] = 0xF8;
        INC       R0
        MOV       A,#aExtendedAddress & 0xff
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,#(aExtendedAddress >> 8) & 0xff
        MOV       DPH,A
        MOV       A,#-0x8
        MOVX      @DPTR,A
//  371       }
//  372     }
//  373 
//  374     if (writeNV)
//  375     {
//  376       (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
??zmain_ext_addr_2:
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#aExtendedAddress & 0xff
        MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,#0x8
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  377     }
//  378   }
//  379 
//  380   // Set the MAC PIB extended address according to results from above.
//  381   (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
??zmain_ext_addr_1:
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,#aExtendedAddress & 0xff
        MOV       R3,#(aExtendedAddress >> 8) & 0xff
        MOV       R1,#-0x1e
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
//  382 }
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function zmain_ext_addr
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function zmain_ext_addr
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker6 Using cfiCommon2
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV       A,#aExtendedAddress & 0xff
        ADD       A,R6
        MOV       DPL,A
        CLR       A
        ADDC      A,#(aExtendedAddress >> 8) & 0xff
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KEUS_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KEUS_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??KEUS_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    KEUS_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??main::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    main

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zmain_ext_addr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zmain_ext_addr

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "KEUS INIT">`:
        DB "KEUS INIT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2:
        DD 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4:
        DD 4

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_8:
        DD 8

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_20:
        DD 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40:
        DD 64

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_80:
        DD 128

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_100:
        DD 256

        END
//  383 
//  384 #if defined ZCL_KEY_ESTABLISH
//  385 /**************************************************************************************************
//  386  * @fn          zmain_cert_init
//  387  *
//  388  * @brief       Initialize the Certicom certificate information.
//  389  *
//  390  * input parameters
//  391  *
//  392  * None.
//  393  *
//  394  * output parameters
//  395  *
//  396  * None.
//  397  *
//  398  * @return      None.
//  399  **************************************************************************************************
//  400  */
//  401 static void zmain_cert_init(void)
//  402 {
//  403   uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
//  404   uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
//  405       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  406       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  407       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  408       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  409       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  410       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
//  411 
//  412   (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
//  413   (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
//  414 
//  415   // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
//  416   // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
//  417   if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL)) ||
//  418       (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData)) ||
//  419       (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
//  420   {
//  421     // Attempt to read the certificate data from its corresponding location on the lock bits page.
//  422     HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
//  423                  ZCL_KE_CA_PUBLIC_KEY_LEN);
//  424     // If the certificate data is not NULL, use it to update the corresponding NV items.
//  425     if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
//  426     {
//  427       (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
//  428       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
//  429                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
//  430       (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
//  431                           ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
//  432       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
//  433                    ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
//  434       (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
//  435     }
//  436   }
//  437 }
//  438 #endif
//  439 
//  440 /**************************************************************************************************
//  441  * @fn          zmain_dev_info
//  442  *
//  443  * @brief       This displays the IEEE (MSB to LSB) on the LCD.
//  444  *
//  445  * input parameters
//  446  *
//  447  * None.
//  448  *
//  449  * output parameters
//  450  *
//  451  * None.
//  452  *
//  453  * @return      None.
//  454  **************************************************************************************************
//  455  */
//  456 static void zmain_dev_info(void)
//  457 {
//  458 
//  459 #if defined(SERIAL_DEBUG_SUPPORTED) || (defined(LEGACY_LCD_DEBUG) && defined(LCD_SUPPORTED))
//  460   uint8 i;
//  461   uint8 *xad;
//  462   uint8 lcd_buf[Z_EXTADDR_LEN * 2 + 1];
//  463 
//  464   // Display the extended address.
//  465   xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
//  466 
//  467   for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
//  468   {
//  469     uint8 ch;
//  470     ch = (*xad >> 4) & 0x0F;
//  471     lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
//  472     ch = *xad & 0x0F;
//  473     lcd_buf[i++] = ch + ((ch < 10) ? '0' : '7');
//  474   }
//  475   lcd_buf[Z_EXTADDR_LEN * 2] = '\0';
//  476   HalLcdWriteString("IEEE: ", HAL_LCD_DEBUG_LINE_1);
//  477   HalLcdWriteString((char *)lcd_buf, HAL_LCD_DEBUG_LINE_2);
//  478 #endif
//  479 }
//  480 
//  481 #ifdef LCD_SUPPORTED
//  482 /*********************************************************************
//  483  * @fn      zmain_lcd_init
//  484  * @brief   Initialize LCD at start up.
//  485  * @return  none
//  486  *********************************************************************/
//  487 static void zmain_lcd_init(void)
//  488 {
//  489 #ifdef SERIAL_DEBUG_SUPPORTED
//  490   {
//  491     HalLcdWriteString("TexasInstruments", HAL_LCD_DEBUG_LINE_1);
//  492 
//  493 #if defined(MT_MAC_FUNC)
//  494 #if defined(ZDO_COORDINATOR)
//  495     HalLcdWriteString("MAC-MT Coord", HAL_LCD_DEBUG_LINE_2);
//  496 #else
//  497     HalLcdWriteString("MAC-MT Device", HAL_LCD_DEBUG_LINE_2);
//  498 #endif // ZDO
//  499 #elif defined(MT_NWK_FUNC)
//  500 #if defined(ZDO_COORDINATOR)
//  501     HalLcdWriteString("NWK Coordinator", HAL_LCD_DEBUG_LINE_2);
//  502 #else
//  503     HalLcdWriteString("NWK Device", HAL_LCD_DEBUG_LINE_2);
//  504 #endif // ZDO
//  505 #endif // MT_FUNC
//  506   }
//  507 #endif // SERIAL_DEBUG_SUPPORTED
//  508 }
//  509 #endif
//  510 
//  511 /*********************************************************************
//  512 *********************************************************************/
// 
// 781 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   9 bytes in segment SFR_AN
//  54 bytes in segment XDATA_ROM_C
//   4 bytes in segment XDATA_Z
// 
//  24 bytes of CODE     memory
//  18 bytes of CONST    memory (+ 36 bytes shared)
//   0 bytes of DATA     memory (+  9 bytes shared)
// 781 bytes of HUGECODE memory
//   4 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
